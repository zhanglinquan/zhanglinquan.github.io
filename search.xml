<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>macos下VScode的配置</title>
    <url>/2020/05/04/vscode-macos/</url>
    <content><![CDATA[<p>最近花了两天时间配置了一下VScode，这里简单记一下</p>
<a id="more"></a>
<h2 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h2><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="用coderunner插件"><a href="#用coderunner插件" class="headerlink" title="用coderunner插件"></a>用coderunner插件</h4><ul>
<li><p>点左边栏里<img src="https://s1.ax1x.com/2020/05/04/YCiaBd.png" alt="YCiaBd.png">，在输入框搜索coderunner，安装，点左上即可运行</p>
</li>
<li><p>为了更好的输入，打开设置（按f1搜settings），搜索run in terminal，打上勾即可<img src="https://s1.ax1x.com/2020/05/04/YCFjsg.png" alt="YCFjsg.png"></p>
</li>
</ul>
<h4 id="用自带的运行"><a href="#用自带的运行" class="headerlink" title="用自带的运行"></a>用自带的运行</h4><ul>
<li>配置完调试后按ctrl（<strong>注意不是cmd</strong>）+F5</li>
</ul>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>我不明白网上讲那么复杂干啥，不就是c,v嘛（（</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>在当前文件夹中新建一个叫.vscode的文件夹（不要在finder里建，直接在左边栏摁<img src="https://s1.ax1x.com/2020/05/04/YCiUnH.png" alt="YCiUnH.png">建）</li>
<li>在.vscode里建这些文件</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/05/04/YCFHit.png" alt="YCFHit.png"></p>
<ul>
<li><p>c_cpp_properties：<a href="https://www.luogu.com.cn/paste/2zlc21yf" target="_blank" rel="noopener">this</a></p>
</li>
<li><p>launch：<a href="https://www.luogu.com.cn/paste/drss6lff" target="_blank" rel="noopener">this</a></p>
</li>
<li><p>settings：<a href="https://www.luogu.com.cn/paste/a379qcz1" target="_blank" rel="noopener">this</a></p>
</li>
<li><p>tasks：<a href="https://www.luogu.com.cn/paste/67o4nuud" target="_blank" rel="noopener">this</a></p>
</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>安装c/c++、codelldb两个插件，方法同coderunner<br><img src="https://s1.ax1x.com/2020/05/09/Yl4kz6.png" alt="Yl4kz6.png"><br><img src="https://s1.ax1x.com/2020/05/09/Yl4FRx.png" alt="Yl4FRx.png"></li>
</ul>
<p>然后就可以按F5调试啦～</p>
<h2 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h4 id="编辑器与窗口管理"><a href="#编辑器与窗口管理" class="headerlink" title="编辑器与窗口管理"></a>编辑器与窗口管理</h4><ul>
<li>打开 cmd+O</li>
<li>新窗口 cmd+Shift+N</li>
<li>新标签页 cmd+N</li>
<li>关闭整个VSC窗口 cmd+Shift+W</li>
<li>关闭当前标签页 cmd+W</li>
<li>重新打开刚刚关闭的标签页 cmd+Shift+T</li>
<li>切换标签页 cmd+Tab</li>
<li>在前三个编辑器之间切换 cmd+1 2 3</li>
<li>将焦点编辑器移动位置  cmd+Alt+←→ 或 cmd+shift+[/]</li>
<li>在标签页之间切换 Alt+1~9</li>
</ul>
<h4 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h4><ul>
<li>搜索 cmd+F</li>
<li>替换 cmd+alt+f</li>
<li>复制光标所在行 只需双击当前行并按下cmd+C即可。</li>
<li>去掉行尾空格 cmd+K 然后 cmd+X</li>
<li>切换行注释(可多行) cmd+/</li>
<li>代码缩进 cmd+[ 或 cmd+]</li>
<li>当前行上下移动 Alt+↑↓</li>
<li>当前行后插入一行 cmd+Enter</li>
<li>当前行前插入一行 cmd+Shift+Enter</li>
<li>选中下个高亮的匹配项 cmd+D</li>
<li>多光标模式 Atl+鼠标单击即可在单击处创建新的光标</li>
<li>速览定义 Alt+F12</li>
<li>Zen模式 cmd+K 然后 cmd+Z</li>
</ul>
<h3 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h3><h4 id="需要插件："><a href="#需要插件：" class="headerlink" title="需要插件："></a>需要插件：<img src="https://s1.ax1x.com/2020/05/04/YCF4qH.png" alt="YCF4qH.png"></h4><p>效果：</p>
<ul>
<li><p>函数预览 <img src="https://s1.ax1x.com/2020/05/04/YCFRxO.png" alt="YCFRxO.png"></p>
</li>
<li><p>大纲</p>
</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/05/04/YCidHA.png" alt="YCidHA.png"></p>
<ul>
<li>代码提示</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/05/05/YiuTFU.png" alt="YiuTFU.png"></p>
<h3 id="VSCODE-luogu"><a href="#VSCODE-luogu" class="headerlink" title="VSCODE luogu"></a>VSCODE luogu</h3><h4 id="需要插件"><a href="#需要插件" class="headerlink" title="需要插件 "></a>需要插件 <img src="https://s1.ax1x.com/2020/05/05/YiKnk8.png" alt="YiKnk8.png"></h4><p>见<a href="https://github.com/yltx/vscode-luogu/wiki" target="_blank" rel="noopener">这里</a></p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h4 id="需要插件-1"><a href="#需要插件-1" class="headerlink" title="需要插件 "></a>需要插件 <img src="https://s1.ax1x.com/2020/05/05/YiQKMj.png" alt="YiQKMj.png"></h4><ul>
<li>集成git到VSCODE（本人是蒟蒻，还不怎么会用） <img src="https://s1.ax1x.com/2020/05/05/YiQwLR.png" alt="YiQwLR.png"></li>
</ul>
<h3 id="markdown支持增强"><a href="#markdown支持增强" class="headerlink" title="markdown支持增强"></a>markdown支持增强</h3><h4 id="需要插件-2"><a href="#需要插件-2" class="headerlink" title="需要插件 "></a>需要插件 <img src="https://s1.ax1x.com/2020/05/05/Yil4c4.png" alt="Yil4c4.png"></h4><ul>
<li>markdown预览、高亮 <img src="https://s1.ax1x.com/2020/05/05/Yi1iUP.png" alt="Yi1iUP.png"><br><a href="https://www.luogu.com.cn/paste/7v6my3kn" target="_blank" rel="noopener">它对语法的检查非常严格，为了给大家参考，贡献本文的 <code>0err 0war</code> markdown源码</a></li>
</ul>
<h3 id="自定义代码片段"><a href="#自定义代码片段" class="headerlink" title="自定义代码片段"></a>自定义代码片段</h3><p><img src="https://s1.ax1x.com/2020/05/09/YlIoZD.png" alt="YlIoZD.png"> 然后按enter就出来了<img src="https://s1.ax1x.com/2020/05/09/YlIxL8.png" alt="YlIxL8.png"></p>
<h4 id="按F1搜索user-sn-按enter，选C-json，按enter编辑"><a href="#按F1搜索user-sn-按enter，选C-json，按enter编辑" class="headerlink" title="按F1搜索user sn 按enter，选C++.json，按enter编辑"></a>按F1搜索<code>user sn</code><img src="https://s1.ax1x.com/2020/05/09/YloMFJ.png" alt="YloMFJ.png"> 按enter，选C++.json，按enter编辑</h4><p>e.g</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">     <span class="attr">"sc"</span>: &#123;</span><br><span class="line">        <span class="attr">"prefix"</span>: <span class="string">"sc"</span>,<span class="comment">//“召唤”键</span></span><br><span class="line">        <span class="attr">"body"</span>: [<span class="comment">//$(num)为光标路径，结尾必须有一个</span></span><br><span class="line">            <span class="string">"#include&lt;bits/stdc++.h&gt;"</span>,</span><br><span class="line">            <span class="string">"using namespace std;\n$1"</span>,</span><br><span class="line">            <span class="string">"int main()&#123;\n\t$2"</span>,</span><br><span class="line">            <span class="string">"&#125;"</span>,</span><br><span class="line">            <span class="string">"$3"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"start"</span><span class="comment">//描述</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>我装了这些插件，仅供参考</p>
<p><img src="https://s1.ax1x.com/2020/05/04/YCi0AI.png" alt="YCi0AI.png">]</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><ul>
<li><p>编辑<img src="https://s1.ax1x.com/2020/05/04/YCFQKg.png" alt="YCFQKg.png"></p>
</li>
<li><p>调试<img src="https://s1.ax1x.com/2020/05/04/YCis9f.png" alt="YCis9f.png"></p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://blog.csdn.net/justidle/article/details/105157419?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2" target="_blank" rel="noopener">https://blog.csdn.net/justidle/article/details/105157419?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2</a></p>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/crab-in-northeast/great-features-and-plugins-for-vscode" target="_blank" rel="noopener">https://www.luogu.com.cn/blog/crab-in-northeast/great-features-and-plugins-for-vscode</a></p>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/GNAQ/VSC-guide" target="_blank" rel="noopener">https://www.luogu.com.cn/blog/GNAQ/VSC-guide</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>一些小东西4月（已解密）</title>
    <url>/2020/04/13/some-small-things/</url>
    <content><![CDATA[<p>以后估计只有这个会更新了吧。。。</p>
<a id="more"></a>
<h1 id="2020-4-13-20-11"><a href="#2020-4-13-20-11" class="headerlink" title="2020-4-13 20:11"></a>2020-4-13 20:11</h1><p>reeder坏了两个星期了，肿莫办啊？在莫得RSS人要没了啊！</p>
<p><img src="https://s1.ax1x.com/2020/04/13/Gvtqwn.png" alt=""></p>
<h1 id="2020-4-14-16-30"><a href="#2020-4-14-16-30" class="headerlink" title="2020-4-14 16:30"></a>2020-4-14 16:30</h1><p>文化课大爆炸（math 71pts），想死的心都有了</p>
<h1 id="2020-4-14-22-30"><a href="#2020-4-14-22-30" class="headerlink" title="2020-4-14 22:30"></a>2020-4-14 22:30</h1><p>迷茫</p>
<h1 id="2020-4-16-18-30"><a href="#2020-4-16-18-30" class="headerlink" title="2020-4-16 18:30"></a>2020-4-16 18:30</h1><p>博客一直爆炸，修不好。。。</p>
<h1 id="2020-4-17-21-20"><a href="#2020-4-17-21-20" class="headerlink" title="2020-4-17 21:20"></a>2020-4-17 21:20</h1><p>修好了</p>
<h1 id="2020-4-18-11-10"><a href="#2020-4-18-11-10" class="headerlink" title="2020-4-18 11:10"></a>2020-4-18 11:10</h1><p><img src="https://gistcdn.githack.com/sjx233/c112365dfa7c0d7a0f78f2294e26fa87/raw/fa488e3b412e01bbcac72409b047eb06d3e18833/benben-hot-words.svg" alt=""></p>
<p>)</p>
<h1 id="2020-4-19-13-49"><a href="#2020-4-19-13-49" class="headerlink" title="2020-4-19 13:49"></a>2020-4-19 13:49</h1><p><img src="https://i.loli.net/2019/10/22/V5IRytciuMTBEPD.gif" alt=""></p>
<h1 id="2020-4-22-21-10"><a href="#2020-4-22-21-10" class="headerlink" title="2020-4-22 21:10"></a>2020-4-22 21:10</h1><p>可怜的创智。。。</p>
<blockquote>
<p>Gitee Gitlab Github 所有开源社区的全部是代码清空并销号</p>
<p>Twitter Ins FB <del>LG</del> 所有社交平台的全部是瞎改密码然后销号</p>
<p>Google Microsoft 账号也被销毁</p>
<p>还有貌似他的blog也被毁了</p>
</blockquote>
<p><a href="https://www.code004.ml/posts/about-chuangzhi-a-party-of-jfca/#more" target="_blank" rel="noopener">More</a></p>
<h1 id="2020-4-27-01-10"><a href="#2020-4-27-01-10" class="headerlink" title="2020-4-27 01:10"></a>2020-4-27 01:10</h1><p>暂别。。再见OI，我还会回来的</p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>chen_zhe ak ioi!</title>
    <url>/2020/05/05/cz-ak-ioi/</url>
    <content><![CDATA[<p>学【老虎叫】语</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Chen Zhe AKs IOI.</span><br><span class="line">Chen Zhe AKed IOI.</span><br><span class="line">Chen Zhe will AK IOI.</span><br><span class="line">Chen Zhe would AK IOI.</span><br><span class="line">Chen Zhe is AKing IOI.</span><br><span class="line">Chen Zhe was AKing IOI.</span><br><span class="line">Chen Zhe will be AKing IOI.</span><br><span class="line">Chen Zhe would be AKing IOI.</span><br><span class="line">Chen Zhe has AKed IOI.</span><br><span class="line">Chen Zhe had AKed IOI.</span><br><span class="line">Chen Zhe will have AKed IOI.</span><br><span class="line">Chen Zhe would have AKed IOI.</span><br><span class="line">Chen Zhe has been AKing IOI.</span><br><span class="line">Chen Zhe had been AKing IOI.</span><br><span class="line">Chen Zhe will have been AKing IOI.</span><br><span class="line">Chen Zhe would have been AKing IOI.</span><br><span class="line">IOI is AKed by Chen Zhe.</span><br><span class="line">IOI was AKed by Chen Zhe.</span><br><span class="line">IOI will be AKed by Chen Zhe.</span><br><span class="line">IOI would be AKed by Chen Zhe.</span><br><span class="line">IOI is being AKed by Chen Zhe.</span><br><span class="line">IOI was being AKed by Chen Zhe.</span><br><span class="line">IOI will be being AKed by Chen Zhe.</span><br><span class="line">IOI would be being AKed by Chen Zhe.</span><br><span class="line">IOI has been AKed by Chen Zhe.</span><br><span class="line">IOI had been AKed by Chen Zhe.</span><br><span class="line">IOI will have been AKed by Chen Zhe.</span><br><span class="line">IOI would have been AKed by Chen Zhe.</span><br><span class="line">IOI has been being AKed by Chen Zhe.</span><br><span class="line">IOI had been being AKed by Chen Zhe.</span><br><span class="line">IOI will have been being AKed by Chen Zhe.</span><br><span class="line">IOI would have been being AKed by Chen Zhe.</span><br><span class="line">Chen Zhe can AK IOI.</span><br><span class="line">Chen Zhe could AK IOI.</span><br><span class="line">Chen Zhe must AK IOI.</span><br><span class="line">Chen Zhe has to AK IOI.</span><br><span class="line">Chen Zhe had to AK IOI.</span><br><span class="line">Chen Zhe will have to AK IOI.</span><br><span class="line">Chen Zhe would have to AK IOI.</span><br><span class="line">Chen Zhe has had to AK IOI.</span><br><span class="line">Chen Zhe had had to AK IOI.</span><br><span class="line">Chen Zhe will have had to AK IOI.</span><br><span class="line">Chen Zhe would have had to AK IOI.</span><br><span class="line">Chen Zhe need to AK IOI.</span><br><span class="line">Chen Zhe dares to AK IOI.</span><br><span class="line">Chen Zhe used to AK IOI.</span><br><span class="line">Chen Zhe is used to AKing IOI.</span><br><span class="line">Chen Zhe is bound to AK IOI.</span><br><span class="line">IOI can be AKed by Chen Zhe.</span><br><span class="line">IOI could be AKed by Chen Zhe.</span><br><span class="line">IOI must be AKed by IOI.</span><br><span class="line">IOI has to be AKed by Chen Zhe.</span><br><span class="line">IOI had to be AKed by Chen Zhe.</span><br><span class="line">IOI will have to be AKed by Chen Zhe.</span><br><span class="line">IOI would have to be AKed by Chen Zhe.</span><br><span class="line">IOI has had to be AKed by Chen Zhe.</span><br><span class="line">IOI had had to be AKed by Chen Zhe.</span><br><span class="line">IOI will have had to be AKed by Chen Zhe.</span><br><span class="line">IOI would have had to be AKed by Chen Zhe.</span><br><span class="line">IOI need to be AKed by Chen Zhe.</span><br><span class="line">IOI dares to be AKed by Chen Zhe.</span><br><span class="line">IOI used to be AKed by Chen Zhe.</span><br><span class="line">IOI is used to being AKed by Chen Zhe.</span><br><span class="line">IOI is bound to be AKed by Chen Zhe.</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>恶搞</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷管理真名</title>
    <url>/2020/05/04/LUOGU/</url>
    <content><![CDATA[<p>专业人肉100年</p>
<a id="more"></a>
<p>kkksc03真名：汪楚奇 男 约1995</p>
<p>lin_toto真名：林方正 约1999</p>
<p>StudyingFather真名：张书豪 男 约2003</p>
<p>chen_zhe真名：陈哲 男 约2004</p>
<p>xht37真名：徐皓天 男 约2003</p>
<p>NaCly_Fish真名：李峻枫 男 约2002</p>
<p>zhouwc真名：周炜程 男 约2003</p>
<p>noip真名：李欣隆 男 2001.3.11</p>
<p>ComeIntoPower真名：袁方舟 男 约2001</p>
<p>CYJian真名：陈胤戬 男 约2003</p>
<p>FlierKing真名：周永隆 男 约2000</p>
<p>zcysky真名：周辰宇 男 约2001</p>
<p>soha真名：金少海 ? 约2000</p>
<p>darkflames真名：？ 约1990（?）</p>
]]></content>
      <tags>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF903C 【Boxes Packing】</title>
    <url>/2020/05/04/solution-cf903c/</url>
    <content><![CDATA[<p>思路：求有几个上升序列，每一个都要尽量长</p>
<a id="more"></a>
<p>step1:用multiset排序</p>
<p>step2-1:如果没有相同的元素，上升序列数为1</p>
<p>step2-2:有x个元素相同，则结论就是max(x)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">1</span>,sum=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    a.insert(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">        a.insert(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it2=it;</span><br><span class="line">    it++;</span><br><span class="line">    <span class="keyword">for</span>(;it!=a.end();it++,it2++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*it2==*it)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">            ans=max(ans,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> sum=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF490A 【Team Olympiad】</title>
    <url>/2020/04/23/solution-CF490a%20/</url>
    <content><![CDATA[<p>思路：输入x，就在对应的桶+1，然后去一个尽可能大的长度，但需要满足三个桶都有这么多。</p>
<a id="more"></a>
<p>发现洛谷题解里啥vector,队列都来了，正宗的用来干这事的map表示:喵喵喵？</p>
<p>所以，我决定写一篇map题解</p>
<p>由于可能键值会重复（我也不确定qwq），所以用multimap</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1,cnt2,cnt3,n,x;</span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; num1,num2,num3;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        <span class="comment">//分别找对应的桶+1</span></span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">			num1.insert(make_pair(++cnt1,i));<span class="comment">//没有重载[]，这是标准插入方法</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(x==<span class="number">2</span>)&#123;</span><br><span class="line">				num2.insert(make_pair(++cnt2,i));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(x==<span class="number">3</span>)&#123;</span><br><span class="line">					num3.insert(make_pair(++cnt3,i));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=min(cnt1,min(cnt2,cnt3));<span class="comment">//找出有几组</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">//输出组数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans;i++)&#123;<span class="comment">//输出位置</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;num1.find(i)-&gt;second&lt;&lt;<span class="string">" "</span>&lt;&lt;num2.find(i)-&gt;second&lt;&lt;<span class="string">" "</span>&lt;&lt;num3.find(i)-&gt;second&lt;&lt;<span class="built_in">endl</span>;/没有重载[]，这是标准输出方法</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF412C 【Pattern】</title>
    <url>/2020/04/17/solution-cf412c/</url>
    <content><![CDATA[<p>tips:不要以为样例没过就一定错</p>
<p>思路：什么也匹配不上的输出’?’，否则随便输出一个除了’?’的字母（这里是’a’）</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> a,b;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==<span class="string">'?'</span>)&#123;</span><br><span class="line">				a[i]=b[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==<span class="string">'.'</span>)&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i]!=b[i]&amp;&amp;b[i]!=<span class="string">'?'</span>)&#123;</span><br><span class="line">					a[i]=<span class="string">'.'</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">'.'</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">'?'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==<span class="string">'?'</span>)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">'a'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 AT2654 【[ARC078A] Splitting Pile】</title>
    <url>/2020/04/04/solution-arc078a/</url>
    <content><![CDATA[<p>思路：暴力求出所有可能，排序求最小绝对值差。</p>
<p>我用vector存储卡的信息，用set排序</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; b;<span class="comment">//自动从小到大排序</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>,x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,tmp;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">//由于空间大小不定，只能用push_back函数放入</span></span><br><span class="line">		a.push_back(tmp);</span><br><span class="line">		s+=tmp;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//现在开始空间大小一定，可以用从0开始的下标访问</span></span><br><span class="line">	x=a[<span class="number">0</span>];</span><br><span class="line">	y=s-a[<span class="number">0</span>];</span><br><span class="line">	b.insert(<span class="built_in">abs</span>(x-y));<span class="comment">//插入第一个</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		x+=a[i];</span><br><span class="line">		y-=a[i];</span><br><span class="line">		b.insert(<span class="built_in">abs</span>(x-y));<span class="comment">//插入set</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;*b.begin()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出自动排序好的最小数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF149A 【Business trip】</title>
    <url>/2020/04/04/solution-cf149a/</url>
    <content><![CDATA[<p>思路：贪心。要让浇水的月份最少，就要让每个浇水月收益最大，所以做法是先将每个月的收益从大到小排序，尽量在收益大的月份浇水。</p>
<p>用multiset排序，每次取第i大累加直到满足要求即可</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,tmp,d=<span class="number">0</span>,s=<span class="number">0</span>,k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">//输入临时变量再插入</span></span><br><span class="line">		a.insert(tmp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(k==<span class="number">0</span>)&#123;<span class="comment">//目标为0的话直接输出0</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.end();<span class="comment">//指向最大值的iterator</span></span><br><span class="line">	it--;<span class="comment">//.end()指向的是最大值还要后面一个，所以要--</span></span><br><span class="line">	<span class="keyword">for</span>(;it!=a.begin();it--)&#123;</span><br><span class="line">		d+=*it;</span><br><span class="line">		s++;</span><br><span class="line">		<span class="keyword">if</span>(d&gt;=k)&#123;<span class="comment">//完成</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	d+=*it;<span class="comment">//如果不补一次循环，第一个元素不会被遍历到</span></span><br><span class="line">	s++;</span><br><span class="line">	<span class="keyword">if</span>(d&gt;=k)&#123;<span class="comment">//完成</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//无法完成目标</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF919A 【Supermarket】</title>
    <url>/2020/04/03/solution-cf919a/</url>
    <content><![CDATA[<p>思路：贪心，找单价最便宜的超市买即可</p>
<p>用set从小到大排序</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt; c;<span class="comment">//自动从小到大排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> tmp=((<span class="keyword">long</span> <span class="keyword">double</span>)a/b);</span><br><span class="line">        c.insert(tmp*n*<span class="number">1.0</span>);<span class="comment">//插入（*1.0用来强制类型转换，否则插入set的数是向下取整的int）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::iterator it=c.begin();<span class="comment">//最便宜超市的单价</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//保留十位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 SP11515 【BUSYMAN - I AM VERY BUSY】</title>
    <url>/2020/04/03/solution-sp11515/</url>
    <content><![CDATA[<p>这题是特别水的贪心，可以用自动排序的set实现</p>
<p>主要思路：将所有活动按结束时间从小到大排序，能进行活动就进行，遇到不能的就结束</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cmp</span>&#123;</span><span class="comment">//比较函数类</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> data&amp; x,<span class="keyword">const</span> data&amp; y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.b==y.b)<span class="comment">//如果结束时间一样就按开始时间排</span></span><br><span class="line">        		<span class="keyword">return</span> x.a&lt;y.a;</span><br><span class="line">    		<span class="keyword">return</span> x.b&lt;y.b;<span class="comment">//否则就按结束时间排</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;data,cmp&gt; a;<span class="comment">//自动按比较函数类排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,t,ans,last;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	data tmp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=t;j++)&#123;<span class="comment">//由于空间大小是set自动分配的，只能先输入临时变量再通过insert函数插入</span></span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp.a&gt;&gt;tmp.b;</span><br><span class="line">			a.insert(tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">set</span>&lt;data&gt;::iterator it=a.begin();<span class="comment">//指向开始的迭代器</span></span><br><span class="line">		ans=<span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line">		last=INT_MIN;</span><br><span class="line">		<span class="keyword">for</span>(;it!=a.end();it++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((*it).a&gt;=last)&#123;<span class="comment">//来得及</span></span><br><span class="line">				ans++;<span class="comment">//能去的加一</span></span><br><span class="line">				<span class="comment">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;ans&lt;&lt;"eee"&lt;&lt;(*it).a&lt;&lt;" "&lt;&lt;(*it).b&lt;&lt;endl;</span></span><br><span class="line">				last=(*it).b;<span class="comment">//更新上一次的结束时间</span></span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		a.clear();<span class="comment">//insert会插入，不会覆盖，所以要清空set</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF230A 【Dragons】</title>
    <url>/2020/04/03/solution-cf230a/</url>
    <content><![CDATA[<p>用贪心的策略，每次打最小的龙</p>
<p>这里用会自动排序的set实现。</p>
<a id="more"></a>
<p>具体见代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dr</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y;<span class="comment">//龙的结构体</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">drcmp</span>&#123;</span><span class="comment">//比较函数类</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> dr&amp; a,<span class="keyword">const</span> dr&amp; b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.x&lt;=b.x;<span class="comment">//注意，要&lt;=，不是&lt;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;dr,drcmp&gt; a;<span class="comment">//存龙的信息的set，使用自定义比较函数类</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> f,n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;f&gt;&gt;n;</span><br><span class="line">	dr tmp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp.x&gt;&gt;tmp.y;<span class="comment">//输入临时变量在插入</span></span><br><span class="line">		a.insert(tmp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">set</span>&lt;dr&gt;::iterator it=a.begin();<span class="comment">//定义指向开头（最小）的迭代器</span></span><br><span class="line">	<span class="keyword">for</span>(;it!=a.end();it++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(f&gt;(*it).x) f+=(*it).y;<span class="comment">//现有力量值足够，加上额外获得的（访问iterator指向的元素要加*）</span></span><br><span class="line">		<span class="keyword">else</span>&#123;<span class="comment">//不能，输出，结束</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//能进入下一层</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF892A 【Greed】</title>
    <url>/2020/04/02/solution-cf892a/</url>
    <content><![CDATA[<p>把所有可乐倒进2个罐子里，那么肯定是选最大的两个罐子，再和总可乐数比较即可。</p>
<p>要自动排序又不会去重的数据结构当然选multiset</p>
<a id="more"></a>
<p>具体用法见代码<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; a;<span class="comment">//自动从小到大排序但不会去重的数据结构</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> tmp,n,sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">//输入可乐数并累加</span></span><br><span class="line">		sum+=tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">////由于空间大小是multiset自动分配的，只能先输入临时变量再通过insert函数插入</span></span><br><span class="line">		a.insert(tmp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.end();<span class="comment">//因为是从小到大排序，所以最大的在结尾处</span></span><br><span class="line">	it--;<span class="comment">//.end()函数返回的iterator是最后一个元素还要后面一个，所以真正最大的要-1，但multiset::iterator不支持除++和--以外的运算，所以用--运算</span></span><br><span class="line">	<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;::iterator it2=it;<span class="comment">//第二大</span></span><br><span class="line">	it2--;<span class="comment">//同上</span></span><br><span class="line">	<span class="keyword">if</span>(sum&lt;=(*it+*it2)) <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//装得下（访问iterator指向的元素要加*）</span></span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//装不下</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF653A 【Bear and Three Balls】</title>
    <url>/2020/04/02/solution-cf653a/</url>
    <content><![CDATA[<p>思路：排序+去重，判断是否有连续的三个数</p>
<p>看到既要排序还要去重，当然用set啦</p>
<a id="more"></a>
<p>具体解释见代码<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; a;<span class="comment">//这是一个自动排序+去重的数据结构</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">int</span> tmp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">//由于空间大小是set自动分配的，只能先输入临时变量再通过insert函数插入</span></span><br><span class="line">		a.insert(tmp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator ed=a.end();<span class="comment">//不直接用.end()的原因看下面for语句的解释</span></span><br><span class="line">	ed--;<span class="comment">//由于set::iterator不能用-=运算符，只能分两次--</span></span><br><span class="line">	ed--;</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=ed;it++)&#123;<span class="comment">//it为a.end()时it+1和+2处会越界，所以用前面相当于a.end()-2的iterator做边界</span></span><br><span class="line">		<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it2=it;<span class="comment">//it+1，因为set::iterator不支持+=或+，所以定义两个iterator分别代表it+1和it+2</span></span><br><span class="line">		it2++;</span><br><span class="line">		<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it3=it2;<span class="comment">//it+2，理由同上</span></span><br><span class="line">		it3++;</span><br><span class="line">		<span class="keyword">if</span>(*it+<span class="number">1</span>==*it2&amp;&amp;*it2+<span class="number">1</span>==*it3)&#123;<span class="comment">//判断是否为连续三个数（访问iterator指向的元素要加*）</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//满足</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//结束</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//不满足</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>神虎牌删犇器</title>
    <url>/2020/03/28/shen-hu-pai-shan-ben-qi/</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li><p>按下键盘上的 <code>f12</code> 按键。</p>
</li>
<li><p>在右方控制栏中点击 <code>Console</code> 会出现可以输入的区域。</p>
</li>
<li><p>输入下方的这段代码。</p>
<a id="more"></a>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">switchMode('my');</span><br><span class="line"><span class="function">function <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	console.log('page ' + feedPage);</span><br><span class="line">	$.get(<span class="string">"/feed/"</span> + feedMode + <span class="string">"?page="</span> + feedPage, function (resp) &#123;</span><br><span class="line">		$feed.append(resp);</span><br><span class="line">		$(<span class="string">"#feed-more"</span>).children(<span class="string">"a"</span>).text(<span class="string">"点击查看更多..."</span>)</span><br><span class="line">		$(<span class="string">"[name=feed-delete]"</span>).click(function () &#123;</span><br><span class="line">			$.post("/api/feed/delete/" + $(this).attr('data-feed-id'), function () &#123;</span><br><span class="line">				switchMode('all');</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;); feedPage++;</span><br><span class="line">		if (resp.indexOf('没有更多动态了') != -1) console.log('finished');</span><br><span class="line">		<span class="keyword">else</span> setTimeout(load, <span class="number">200</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(load, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li><p>接着回车 <code>enter</code> 即可。</p>
</li>
<li><p>马上会出现一大串的数字，慢慢等待 <code>Page</code> 闪完后出现 <code>finish</code>。</p>
</li>
</ol>
<p>接着输入以下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">var l =  $('#feed &gt; li &gt; div.am-comment-main &gt; header &gt; div &gt; a:nth-child(2)');</span><br><span class="line"><span class="function">function <span class="title">f</span><span class="params">(i)</span> </span>&#123;</span><br><span class="line">$ .post("/api/feed/delete/"+ $(l[i]).attr('data-feed-id'), function() &#123;</span><br><span class="line">console.<span class="built_in">log</span>(i);</span><br><span class="line"><span class="keyword">if</span>(i&lt;l.length<span class="number">-1</span>)setTimeout(`f($&#123;i+<span class="number">1</span>&#125;)`,<span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li>如果出现 <code>503</code> 界面重新再次<strong>重复上述过程</strong>。</li>
</ol>
<p>直到删完为止，重新加载整个界面，建议重启浏览器。</p>
<p>最后就完成了删犇的过程。</p>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>关于BFS</title>
    <url>/2020/03/06/about-bfs/</url>
    <content><![CDATA[<p><del>他死了</del></p>
<a id="more"></a>
<p>BFS，即宽度优先搜索（balabala不讲无意义内容）<br>核心：用一个队列来记录“待办事项”，用最短路来举个例子，代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>],q[<span class="number">250000</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sx,sy,ex,ey;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> tmp;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			<span class="keyword">if</span>(tmp==<span class="string">'.'</span>) a[i][j]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(tmp==<span class="string">'#'</span>) a[i][j]=<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span>(tmp==<span class="string">'*'</span>)&#123;</span><br><span class="line">				a[i][j]=<span class="number">0</span>;</span><br><span class="line">				ex=i;</span><br><span class="line">				ey=j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(tmp==<span class="string">'@'</span>)&#123;</span><br><span class="line">				a[i][j]=<span class="number">0</span>;</span><br><span class="line">				sx=i;</span><br><span class="line">				sy=j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> h=<span class="number">1</span>,t=<span class="number">1</span>,n,m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	input(n,m);</span><br><span class="line">	q[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	q[<span class="number">1</span>][<span class="number">1</span>]=sx;<span class="comment">//初始化“待办事项</span></span><br><span class="line">	q[<span class="number">1</span>][<span class="number">2</span>]=sy;<span class="comment">//同上</span></span><br><span class="line">	a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(h&lt;=t)&#123;</span><br><span class="line">		<span class="keyword">if</span>(q[h][<span class="number">1</span>]==ex&amp;&amp;q[h][<span class="number">2</span>]==ey)&#123;<span class="comment">//达到目标</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;q[h][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> x,y;</span><br><span class="line">			x=q[h][<span class="number">1</span>]+dx[i];<span class="comment">//拿到事情</span></span><br><span class="line">			y=q[h][<span class="number">2</span>]+dy[i];<span class="comment">//同上</span></span><br><span class="line">			<span class="keyword">if</span>(a[x][y]==<span class="number">0</span>)&#123;<span class="comment">//做事</span></span><br><span class="line">				t++;</span><br><span class="line">				q[t][<span class="number">0</span>]=q[h][<span class="number">0</span>]+<span class="number">1</span>;<span class="comment">//产生新事</span></span><br><span class="line">				q[t][<span class="number">1</span>]=x;<span class="comment">//同上</span></span><br><span class="line">				q[t][<span class="number">2</span>]=y;<span class="comment">//同上</span></span><br><span class="line">				a[x][y]=<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		h++;<span class="comment">//做完了一件事</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//无解</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面没有用STL中的queue，但原理相同。<br>代码中每次穷举的是步数（即离终点的距离），一次while穷举一个步数。<br>可以看到，队列在while循环做完之前不为空（即有效解一定在穷举完所有步数之前得到），所以BFS的解一般是在循环内产生。<br>然后，我们用深搜（DFS）来实现一下<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>],d[<span class="number">105</span>][<span class="number">105</span>],n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dg</span><span class="params">(<span class="keyword">int</span> dep,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dep&lt;d[i][j]&amp;&amp;dep&lt;<span class="number">200</span>)&#123;</span><br><span class="line">		d[i][j]=dep;</span><br><span class="line">		<span class="keyword">if</span>(a[i][j+<span class="number">1</span>]==<span class="number">0</span>) dg(dep+<span class="number">1</span>,i,j+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(a[i+<span class="number">1</span>][j]==<span class="number">0</span>) dg(dep+<span class="number">1</span>,i+<span class="number">1</span>,j);</span><br><span class="line">		<span class="keyword">if</span>(a[i][j<span class="number">-1</span>]==<span class="number">0</span>) dg(dep+<span class="number">1</span>,i,j<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">if</span>(a[i<span class="number">-1</span>][j]==<span class="number">0</span>) dg(dep+<span class="number">1</span>,i<span class="number">-1</span>,j);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> tmp;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">			<span class="keyword">if</span>(tmp==<span class="string">'.'</span>) a[i][j]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(tmp==<span class="string">'#'</span>) a[i][j]=<span class="number">-1</span>;</span><br><span class="line">			d[i][j]=INT_MAX;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	input(n,m);</span><br><span class="line">	dg(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;d[n][m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现，DFS慢在于需要回溯，而且不做到底不回头，举个例子，正确路径是右右右右，而DFS永远先穷举左，产生大量无意义劳动，而BFS只需要循环4*4=16次，速度进步巨大。（所以DFS要加玄学限制:dep&lt;200）</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次做工程的成果</title>
    <url>/2020/03/05/first-project/</url>
    <content><![CDATA[<p>寒假里摸鱼的成果</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">坑点大全：</span></span><br><span class="line"><span class="comment">1.地图是25*25的，不是27*27的</span></span><br><span class="line"><span class="comment">2.x,y是行，列，不是列，行（可能某些地方做了转换） </span></span><br><span class="line"><span class="comment">3.p1在代码中还记作p1，但p2记作p0</span></span><br><span class="line"><span class="comment">4.p2(p0)代码中变量为p1的后面加数字1</span></span><br><span class="line"><span class="comment">5.重要！！重要！！！！重要！！！这个程序分4个线程，分别是打印地图，main函数，p1键盘侦测，p2（p0）键盘侦测</span></span><br><span class="line"><span class="comment">6.原来想做的事战略游戏（放置方块）（像皇室战争）所以障碍才分1-4，1、2归P1，3、4归P2，后来改成走迷宫，添加了6目标方块，还可以放障碍（1-4），后来变成放地雷，再变成自动生成地雷，最后水平不足，变成</span></span><br><span class="line"><span class="comment">自动生成障碍。</span></span><br><span class="line"><span class="comment">7.请未来的自己帮忙，其实自动行走是bug。（2020.1.25） </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line">COORD coord;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mapx=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">bool</span> stop=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> maps[mapx][mapx];</span><br><span class="line">HANDLE hCon;</span><br><span class="line"><span class="keyword">int</span> p1ott,p1btt,p2ott,p2btt,pn=<span class="number">1</span>,x=<span class="number">2</span>,y=<span class="number">2</span>,ops,ops1,x1=<span class="number">2</span>,y1=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">enum</span> Color &#123;DARKBLUE=<span class="number">1</span>,DARKGREEN,DARKTEAL,DARKRED,DARKPINK,DARKYELLOW,GRAY,DARKGRAY,BLUE,GREEN,TEAL,RED,PINK,YELLOW,WHITE&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">window</span><span class="params">()</span></span>&#123;</span><br><span class="line">	HANDLE handle=GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">	CONSOLE_CURSOR_INFO CursorInfo;</span><br><span class="line">	GetConsoleCursorInfo(handle,&amp;CursorInfo);</span><br><span class="line">	CursorInfo.bVisible=<span class="literal">false</span>;</span><br><span class="line">	SetConsoleCursorInfo(handle,&amp;CursorInfo); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetColor</span><span class="params">(Color c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hCon==<span class="literal">NULL</span>)</span><br><span class="line">    	hCon=GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleTextAttribute(hCon,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoToxy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    coord.X=x;</span><br><span class="line">    coord.Y=y;</span><br><span class="line">    HANDLE a=GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleCursorPosition(a,coord);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clrscr</span><span class="params">()</span></span>&#123; </span><br><span class="line">	HANDLE hndl=GetStdHandle(STD_OUTPUT_HANDLE); </span><br><span class="line">	CONSOLE_SCREEN_BUFFER_INFO csbi; </span><br><span class="line">	GetConsoleScreenBufferInfo(hndl,&amp;csbi); </span><br><span class="line">	DWORD written; </span><br><span class="line">	DWORD N=csbi.dwSize.X*csbi.dwCursorPosition.Y+csbi.dwCursorPosition.X+<span class="number">1</span>; </span><br><span class="line">	COORD curhome=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;; </span><br><span class="line">	FillConsoleOutputCharacter(hndl,<span class="string">' '</span>,N,curhome,&amp;written); </span><br><span class="line">	csbi.srWindow.Bottom-=csbi.srWindow.Top; </span><br><span class="line">	csbi.srWindow.Top=<span class="number">0</span>; </span><br><span class="line">	SetConsoleWindowInfo(hndl,TRUE,&amp;csbi.srWindow); </span><br><span class="line">	SetConsoleCursorPosition(hndl,curhome); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">keyboard</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (GetAsyncKeyState(VK_UP)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">		<span class="keyword">return</span> <span class="string">'w'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_DOWN)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">		<span class="keyword">return</span> <span class="string">'s'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_LEFT)&amp;<span class="number">0x8000</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_RIGHT)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'d'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_NUMPAD8)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'i'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_NUMPAD5)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">    	<span class="keyword">return</span> <span class="string">'k'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_NUMPAD4)&amp;<span class="number">0x8000</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'j'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_NUMPAD6)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'l'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">to_ch_map</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">switch</span>(n)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">return</span> <span class="string">'.'</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">return</span> <span class="string">'@'</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">return</span> <span class="string">'#'</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">return</span> <span class="string">'$'</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> <span class="string">'%'</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:<span class="keyword">return</span> <span class="string">'='</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:<span class="keyword">return</span> <span class="string">'*'</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">7</span>:<span class="keyword">return</span> <span class="string">'&amp;'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outputmap</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c;</span><br><span class="line">	<span class="keyword">char</span> c2;</span><br><span class="line">	<span class="keyword">char</span> op;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;mapx;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;mapx;j++)&#123;</span><br><span class="line">			GoToxy(j,i);</span><br><span class="line">			c=maps[i][j];</span><br><span class="line">			c2=to_ch_map(c);</span><br><span class="line">			<span class="keyword">if</span>(maps[i][j]==<span class="number">5</span>||maps[i][j]==<span class="number">7</span>)&#123;</span><br><span class="line">				SetColor(RED);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%c"</span>,c2);</span><br><span class="line">			SetColor(YELLOW);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> op;</span><br><span class="line">	<span class="keyword">int</span> oops=ops;</span><br><span class="line">	<span class="keyword">int</span> ox=<span class="number">1</span>,oy=<span class="number">1</span>,th;</span><br><span class="line">	ox=x;oy=y;</span><br><span class="line">	op=keyboard();</span><br><span class="line">	<span class="keyword">switch</span>(op)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'w'</span>:x--;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'s'</span>:x++;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'a'</span>:y--;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'d'</span>:y++;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(maps[x][y]!=<span class="number">0</span>&amp;&amp;maps[x][y]!=<span class="number">6</span>)&#123;</span><br><span class="line">		x=ox;</span><br><span class="line">		y=oy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(oops==<span class="number">0</span>&amp;&amp;ops==<span class="number">0</span>) maps[ox][oy]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(ops==<span class="number">0</span>) maps[x][y]=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p2</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> op1;</span><br><span class="line">	<span class="keyword">int</span> oops1=ops1;</span><br><span class="line">	<span class="keyword">int</span> ox1=<span class="number">1</span>,oy1=<span class="number">1</span>,th1;</span><br><span class="line">	ox1=x1;oy1=y1;</span><br><span class="line">	op1=keyboard();</span><br><span class="line">	<span class="keyword">switch</span>(op1)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'i'</span>:x1--;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'k'</span>:x1++;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'j'</span>:y1--;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'l'</span>:y1++;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(maps[x1][y1]!=<span class="number">0</span>&amp;&amp;maps[x1][y1]!=<span class="number">6</span>)&#123;</span><br><span class="line">		x1=ox1;</span><br><span class="line">		y1=oy1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(oops1==<span class="number">0</span>&amp;&amp;ops1==<span class="number">0</span>) maps[ox1][oy1]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(ops1==<span class="number">0</span>) maps[x1][y1]=<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">	srand(time(<span class="number">0</span>));</span><br><span class="line">	<span class="built_in">memset</span>(maps,rand(),<span class="keyword">sizeof</span>(maps));</span><br><span class="line">	<span class="built_in">memset</span>(maps,<span class="number">0</span>,<span class="keyword">sizeof</span>(maps));</span><br><span class="line">	maps[<span class="number">11</span>][<span class="number">11</span>]=<span class="number">6</span>;</span><br><span class="line">	maps[<span class="number">10</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	maps[<span class="number">11</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	maps[<span class="number">8</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">	maps[<span class="number">13</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">	maps[<span class="number">10</span>][mapx<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">	maps[<span class="number">11</span>][mapx<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">	maps[<span class="number">8</span>][mapx<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">	maps[<span class="number">13</span>][mapx<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">	maps[<span class="number">11</span>][<span class="number">10</span>]=<span class="number">2</span>;</span><br><span class="line">	maps[<span class="number">11</span>][<span class="number">12</span>]=<span class="number">2</span>;</span><br><span class="line">	maps[<span class="number">10</span>][<span class="number">11</span>]=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mapx<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		maps[<span class="number">1</span>][i]=<span class="number">2</span>;</span><br><span class="line">		maps[i][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mapx<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		maps[i][mapx<span class="number">-1</span>]=<span class="number">2</span>;</span><br><span class="line">		maps[mapx<span class="number">-1</span>][i]=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	srand(time(<span class="number">0</span>));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;mapx<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;mapx<span class="number">-1</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j==<span class="number">11</span>||i==<span class="number">11</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(rand()%<span class="number">10</span>==<span class="number">0</span>) maps[i][j]==<span class="number">4</span>;</span><br><span class="line">			<span class="keyword">if</span>(rand()%<span class="number">13</span>==<span class="number">0</span>) maps[i][j]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(rand()%<span class="number">75</span>==<span class="number">0</span>) maps[i][j]=<span class="number">3</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">th1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">		outputmap();</span><br><span class="line">	&#125;</span><br><span class="line">	clrscr();</span><br><span class="line">	system(<span class="string">"color C4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">th2</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">		p2();</span><br><span class="line">		Sleep(<span class="number">100</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	clrscr();</span><br><span class="line">	system(<span class="string">"color C4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">th3</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">		p1();</span><br><span class="line">		Sleep(<span class="number">100</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	clrscr();</span><br><span class="line">	system(<span class="string">"color C4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	window();</span><br><span class="line">	start();</span><br><span class="line">	<span class="function">thread <span class="title">t</span><span class="params">(&amp;th1)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">t1</span><span class="params">(&amp;th2)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">t3</span><span class="params">(&amp;th3)</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">		<span class="keyword">if</span>(maps[<span class="number">11</span>][<span class="number">11</span>]!=<span class="number">5</span>&amp;&amp;maps[<span class="number">11</span>][<span class="number">11</span>]!=<span class="number">7</span>&amp;&amp;maps[<span class="number">11</span>][<span class="number">11</span>]!=<span class="number">6</span>)&#123;</span><br><span class="line">			maps[<span class="number">11</span>][<span class="number">11</span>]=<span class="number">6</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"this block must be 6!!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(maps[<span class="number">11</span>][<span class="number">11</span>]==<span class="number">5</span>)&#123;</span><br><span class="line">			stop=!stop;</span><br><span class="line">			clrscr();</span><br><span class="line">			Sleep(<span class="number">1000</span>);</span><br><span class="line">			system(<span class="string">"color 07"</span>);</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"p1 WIN"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			system(<span class="string">"pause"</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(maps[<span class="number">11</span>][<span class="number">11</span>]==<span class="number">7</span>)&#123;</span><br><span class="line">			stop=!stop;</span><br><span class="line">			clrscr();</span><br><span class="line">			Sleep(<span class="number">1000</span>);</span><br><span class="line">			system(<span class="string">"color 07"</span>);</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"p2 WIN"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			system(<span class="string">"pause"</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>从记忆化搜索到DP（动态规划）</title>
    <url>/2020/02/19/dp/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><p>记忆化搜索是啥</p>
</li>
<li><p>记忆化搜索和动态规划有啥关系</p>
</li>
<li><p>动态规划做法</p>
<a id="more"></a>
<h1 id="1-记忆化搜索是啥（引入"><a href="#1-记忆化搜索是啥（引入" class="headerlink" title="1. 记忆化搜索是啥（引入"></a>1. 记忆化搜索是啥（引入</h1><p>好，就以采药这道题为例，我不会动态规划，只会搜索，我就会直接写一个粗暴的 DFS :</p>
</li>
</ul>
<p>注: 为了方便食用, 本文中所有代码省略头文件<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="keyword">int</span> tcost[<span class="number">103</span>],mget[<span class="number">103</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tleft,<span class="keyword">int</span> tans)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tleft&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos==n+<span class="number">1</span>)&#123;</span><br><span class="line">        ans=max(ans,tans);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(pos+<span class="number">1</span>,tleft,tans);</span><br><span class="line">    dfs(pos+<span class="number">1</span>,tleft-tcost[pos],tans+mget[pos]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tcost[i]&gt;&gt;mget[i];</span><br><span class="line">    dfs(<span class="number">1</span>,t,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>30pts</p>
<p>然后我心血来潮, 想不借助任何 “外部变量”(就是 dfs 函数外且 值随 dfs 运行而改变的变量 ), 比如 ans</p>
<p>把 ans 删了之后就有一个问题: 我们拿什么来记录答案?</p>
<p>答案很简单:</p>
<p>返回值!</p>
<p>此时 dfs(pos,tleft) 返回在时间 tleft内采集 后 pos 个草药, 能获得的最大收益</p>
<p>不理解就看看代码吧:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,time;</span><br><span class="line"><span class="keyword">int</span> tcost[<span class="number">103</span>],mget[<span class="number">103</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tleft)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dfs1,dfs2=-INF;</span><br><span class="line">    dfs1=dfs(pos+<span class="number">1</span>,tleft);</span><br><span class="line">    <span class="keyword">if</span>( tleft&gt;tcost[pos] )</span><br><span class="line">        dfs2=dfs(pos+<span class="number">1</span>,tleft-tcost[pos])+mget[pos];</span><br><span class="line">    <span class="keyword">return</span> max(dfs1,dfs2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;time&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tcost[i]&gt;&gt;mget[i];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">1</span>,time)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><del>还是30pts，我太难了</del><br>但这个时候, 我们的程序已经不依赖任何外部变量了.</p>
<p>然后我非常无聊, 将所有 dfs 的返回值都记录下来, 竟然发现……</p>
<pre><code>震惊, 对于相同的 pos 和 tleft,dfs 的返回值总是相同的!
</code></pre><p>想一想也不奇怪, 因为我们的 dfs 没有依赖任何外部变量.</p>
<p>旁白: 像 tcost[103],mget[103] 这种东西不算是外部变量, 因为她们在 dfs 过程中不变.</p>
<p>然后?</p>
<p>开个数组 mem , 记录下来每个 dfs(pos,tleft) 的返回值. 刚开始把 mem 中每个值都设成 -1 (代表没访问过). 每次刚刚进入一个 dfs 前(我们的 dfs 是递归调用的嘛), 都检测 mem[pos][tleft]是否为 -1 , 如果是就正常执行并把答案记录到 mem 中, 否则?</p>
<p>直接返回 mem 中的值!<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="keyword">int</span> tcost[<span class="number">103</span>],mget[<span class="number">103</span>];</span><br><span class="line"><span class="keyword">int</span> mem[<span class="number">103</span>][<span class="number">1003</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tleft)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mem[pos][tleft]!=<span class="number">-1</span>) <span class="keyword">return</span> mem[pos][tleft];</span><br><span class="line">    <span class="keyword">if</span>(pos==n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> mem[pos][tleft] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dfs1,dfs2=-INF;</span><br><span class="line">    dfs1 = dfs(pos+<span class="number">1</span>,tleft);</span><br><span class="line">    <span class="keyword">if</span>(tleft&gt;=tcost[pos])</span><br><span class="line">        dfs2=dfs(pos+<span class="number">1</span>,tleft-tcost[pos])+mget[pos];</span><br><span class="line">    <span class="keyword">return</span> mem[pos][tleft]=max(dfs1,dfs2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(mem,<span class="number">-1</span>,<span class="keyword">sizeof</span>(mem));</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tcost[i]&gt;&gt;mget[i];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">1</span>,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>此时 mem 的意义与 dfs 相同：</p>
<pre><code>在时间 tleft内采集 后 pos 个草药, 能获得的最大收益
</code></pre><p>这能 ac?</p>
<p>能. 这就是 “采药” 那题的 AC 代码</p>
<p>好我们倒腾出了记忆化搜索</p>
<p>总结一下记忆化搜索是啥:<br>不依赖任何 外部变量，答案以返回值的形式存在, 而不能以参数的形式存在(就是不能将 dfs 定义成 dfs(pos,tleft,nowans ), 这里面的 nowans 不符合要求).</p>
<p>对于相同一组参数, dfs 返回值总是相同的</p>
<h1 id="记忆化搜索与动态规划的关系-（分析"><a href="#记忆化搜索与动态规划的关系-（分析" class="headerlink" title="记忆化搜索与动态规划的关系:（分析"></a>记忆化搜索与动态规划的关系:（分析</h1><p>基本是朋 (ji) 友关系</p>
<p>有人会问: 记忆化搜索难道不是搜索?</p>
<p>一定程度上来说，她是搜索.但个人认为她更像dp</p>
<p>其实说白了，记忆化搜索就是dp</p>
<p>不信你看mem 的意义:</p>
<p>在时间 tleft 内采集 后 pos 个草药, 能获得的最大收益</p>
<p>这不就是dp的状态?</p>
<p>由上面的代码中可以看出:</p>
<p>dfs(pos,left) = max(dfs(pos+1,tleft-tcost[pos])+mget[pos] , dfs(pos+1,tleft))<br>即为</p>
<p>mem[pos][tleft] = max(mem[pos+1][tleft-tcost[pos]]+mget[pos] , mem[pos+1][tleft])<br>这不就是dp的状态转移?</p>
<p>总结一下：</p>
<pre><code>记忆化搜索和动态规划从根本上来讲就是一个东西,**(印象中)任何一个 dp 方程都能转为记忆化搜索 ，反之亦然（为什么？见下文“体现在”的第四条）
</code></pre><p>体现在</p>
<ul>
<li><p>根据记忆化搜索的参数可以直接得到dp的状态，反之亦然</p>
</li>
<li><p>根据记忆化搜索的递归关系可以写出状态转移方程，这个方程可以直接写出循环式的dp，只不过是反的(想想为什么？)，反之亦然</p>
</li>
<li><p>大部分记忆化搜索时空复杂度与 不加优化的 dp 完全相同</p>
</li>
<li><p><strong>最重要的一点：二者思想类似！！ 核心思想均为：利用对于相同参数答案相同的特性，对于相同的参数（循环式的dp体现为数组下标），记录其答案，免去重复计算，从而起到优化时间复杂度的作用。这，便是二者的精髓。</strong></p>
</li>
</ul>
<p>建议好好想想第四条。记住，学一个算法，一定要理解他的精髓。</p>
<p>举个栗子:</p>
<p>dp[i][j][k] = dp[i+1][j+1][k-a[j]] + dp[i+1][j][k]<br>转为<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    边界条件</span><br><span class="line">    <span class="keyword">if</span>( mem[i][j][k]!=<span class="number">-1</span>) <span class="keyword">return</span> mem[i][j][k];</span><br><span class="line">    <span class="keyword">return</span> mem[i][j][k]=dfs(i+<span class="number">1</span>,j+<span class="number">1</span>,k-a[j])+dfs(i+<span class="number">1</span>,j,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(mem,<span class="number">-1</span>,<span class="keyword">sizeof</span>(mem));</span><br><span class="line">    读入</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>二者满足上面提到的所有关系</p>
<h1 id="dp做法"><a href="#dp做法" class="headerlink" title="dp做法"></a>dp做法</h1><p><del>上面转移方程都出来了，还不会？？</del><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1001</span>],n,t,v[<span class="number">101</span>],w[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=t;j&gt;=w[i];j--) &#123;</span><br><span class="line">            f[j]=max(f[j-w[i]]+v[i], f[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f[t];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>递归</title>
    <url>/2019/10/25/dg/</url>
    <content><![CDATA[<p>这节课学了递归，<del>好晕</del></p>
<p>好不容易想通了一点赶紧记下，充当第一篇博客</p>
<a id="more"></a>
<p>递归就是函数自己调用自己的过程。那为什么要有递归呢？原因很简单：在解决一个问题的同时，需要解决另一个与当前问题相同的问题，并且这个问题在特定情况下有解（递归结束条件），其他情况的答案都可由此答案推导而来（转移方程）。那又有问题了，为什么不用循环呢？观察上面的描述中“需要解决另一个与当前问题相同的问题”这一句话，真的只需要解决另一个吗？答案是否定的，有可能要解决多个同样的问题，这种情况下，如果使用循环，那么每个循环都要产生多个同样的循环，是无法实现的，所以才要使用递归。</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
