<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuygfgg&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuygfgg.ml/"/>
  <updated>2020-04-24T13:38:12.676Z</updated>
  <id>https://yuygfgg.ml/</id>
  
  <author>
    <name>yuygfgg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些小东西</title>
    <link href="https://yuygfgg.ml/2050/04/13/some-small-things/"/>
    <id>https://yuygfgg.ml/2050/04/13/some-small-things/</id>
    <published>2050-04-13T12:11:00.000Z</published>
    <updated>2020-04-24T13:38:12.676Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9d0145f23a25eb7fb4307b5fcafbc10151251c33ffb5e98cd53b2976a3c58d07">6c05e483000f5e71e39aa639dcc21b4abe0cbd39549060fbbccc580a33945d150a7a3ad60cde7b99ff5a50ddc2aadcd681290bfdc55d21937292124866fefd258b5b00d08aad6fcdf6af1486a1a915079ad61c225de4aac1f32757dc02e2fee3fd48df96299d7e130187d6f328b4ce71096611d77787ba9113d73d7ab45bb09cba49efbdca71fc32e39165c021b63e4972c3f98d094f6490608605ff7831c83b55c6d93784f5df9fd3bc7c666519c659d157d515d56dad05d540e281d3f16c96883d11574ba6ae6eceed5665c9b7014f6701fe4db602c446d1c29b169020997d63933d2e9cc223cbe16a3ca60e8ec55cf0ae05cb22444da6a0947318403007f34870a39b5687c32a7a17e042f266bec2b4140353b3c039c90b9149d70e332a497b00883b4a3a170979593d795b6ab85ec252d4909805d9eac5829c71d53bb1a6616ab35496c02703bab32f76cbbf3f058b184eb46855c1de6b5859e8fda80ef30c3128eca162d3059313997da412f988bec8de6d14535c5b8e56dc57e8788dc8b37fe31d659e1ef1e266eb55a9985e5eff3ab5b2ca8f0dcdd323c6671d65bdded0b3d0e41a69dbe41e93a6c2e3bb100cfb8f4548736e9064abed3637e85b4fb1e9361edccbc5ea4fa3bc8d6dd0f333f16a30b8eef6bee562eadb4d719287434bcc6501f3b80cab33011a2b2ae3858c8dbe2e22a8e034a20eb9fbbd8e5011de6f8b347e9040b85add61e3e7bae881e60b842fc55a059f7884e267de99e5eceb80342984a43305c156caa50d785844709cb2917e5df6dcbc3e9344259ce7d86aff65a22b60f05bc327342341d0ab7363782d50bd4807145cd25ef1d7261c19c7493846297b9dec15c949529ff65db179107a30fe880dc163e64908982eeb3809c41a6b76a848bc322e4fd45af22bd0954f8339ae47b354e56e035a859f1df9fc55f9ebf97c4a72465592caac58d30b8db0c705d4ce3e94cb7063367e803bc42e8aa94bd34167410d98fada3cc9fb49f5acdbfe0de9820dfa5f05cbe286203827cb7515aba0df95b96db69123265b0d1e418d85c421683078b8f1342bf23db24478578797f89d6ffec4d492d35f8e56304855d30a8a5b5c95b78976b95fde814abfca8bf2f1d762e254eae4d32788df6dc0592f23bef006eca2b9541f2d3e58ec0af84db3062fe28a295bb215690a449d392ebf617bf93fdf5273b0228adb2763f3d5d2414c2503e094d36a38baf18c8e3f03922334cca024a8e44a63eab0ad0128c763bfb265242fe9bb49a52a646b321c1fb38f5ad5783a5705d0944385f2af4348b8c3935dd6415efd5eed047658b40c40984a651b5d188dd511bfe74f5dae3be8f255a0a9f4e934a83626f398f9dc73c797c68af04efa499b5fc70149cac1d7aea60bace5ea647d3e89da33028a6306cba6e9c1de4bb77cf10a506354560ab0c681894ae9257e4cc8227b89463f6d577db708b4439820cd129b8c72956c829f4e884673b180797830c9c3b5007d4dc45a5acf1402d4ca57ef49bd38352036b356514d267c1b46727bfdc154081679adb2709d154d3eaafcbb4b9238ec05cc3779e171787d5df5374cff9ec513b74b55861553b9bb8e5f82324f3faf5db79dd2332c158e0c0558e3cf660c0b7d41e4a34bbf89f7db1743e2732d2cef3945e2e86688670445c32f17cecb24893c430cfa25492f4471b3be96d6edae386ea21131c1210d367c45318af53eee2406395aa7806898883ddca477f44fd4493aee79139b59c5d5f2da000ec3aec54b18215b02c216efeae20a72697240a1adf9041ca033bff16ba579ade9d1fb0f79de4c927a3d6ac1bc625eea8b750cf53f8c8ad1492559625c92979e30f67158f21d7f0fc014324f526d2c9d5ed3c36cdfcf1614d0b855d356ca4c72d7d279a5a119d2a1d41e6598721828c5669a31d5c4933ea4f19db9ad19b2544a4f3e1892820dcacb4ea8d222df2b4716559e5f07cd78965a07a77f2bd5f5f71dc13f127fbd238920551e4538351d58fcc7650b743b42855b91338718496c71124bb5aee40c52c6f08b7c32441bc26bdded37622244941b7e3ce6fe72746198f93841d0feb947fb190b0536894644002878c0a37fce6dfb28a483991ebde4f0fa65197457bee2d0613ff1a3db84401cb0bd33bc02e560fca2e6dc4084c95a575feee977dc257c3d179f36bdc01d733af5f8daaf9998f580363b5035db5de4854bf89a45dda10ce77f357540e632a23da2aa98df59b1bcbc5300b936287938fa0be395ce4a658bdc6708ac8aff955ce3f07018b070273e2a45d9495c6488fa701de53fc5668dbde5148b5ba1974bb91949ba78ff937d5e23a1eaff66081dc1db70f54c7852a3897273b11d9846b5c627f9e27ff2325989e280743a37ff92b6945f743418aa0daad943cbc524270743949bed79452d7a992e4c7f0999de06fce99c6b47c7ccef27843238fd914be5a90e2e8160ff5278271825d64293460b0901be8bd87d62ea5a2e963b2ba97a147537f419632d77859b75662cb4a2d2c8f806ae65cb619f6b70cdeeb43b715803b63ad616bab4cbcbae2ac0a4620867284486b2530b264b690c708d1d88fd5f057749f90c29aa948b526614fda8e5726c38e40f5c33b0571c6b36b765175c79c933da20238220a0de96ac8e9d19e9bff785e5fecb4e7265a22e163a44dd97c9684b4f14892e9300a78596d5efd270eb2804eafa667eeaee7b54c04aea8b7f2bd71a5a876d11cfca31a14e1c741febe6ac3281838c1bbe66987bb682541ee97e030e3630941d0cab887f04d3ddaada7b158d07618b8145efbd111d1ac99e0a5b0d6b865a1e3461ab549d445b355eb393a14c3ece9ba1259e457ba8809507a6f3d1741e1c422bfdc43d45b2e240eeca20939728c6cdd5af26909706d122</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
    
    
      <category term="其他" scheme="https://yuygfgg.ml/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF490A 【Team Olympiad】</title>
    <link href="https://yuygfgg.ml/2020/04/23/solution-CF490A%20/"/>
    <id>https://yuygfgg.ml/2020/04/23/solution-CF490A%20/</id>
    <published>2020-04-23T12:35:30.000Z</published>
    <updated>2020-04-23T12:36:33.596Z</updated>
    
    <content type="html"><![CDATA[<p>思路：输入x，就在对应的桶+1，然后去一个尽可能大的长度，但需要满足三个桶都有这么多。</p><a id="more"></a><p>发现洛谷题解里啥vector,队列都来了，正宗的用来干这事的map表示:喵喵喵？</p><p>所以，我决定写一篇map题解</p><p>由于可能键值会重复（我也不确定qwq），所以用multimap</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1,cnt2,cnt3,n,x;</span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; num1,num2,num3;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        <span class="comment">//分别找对应的桶+1</span></span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">num1.insert(make_pair(++cnt1,i));<span class="comment">//没有重载[]，这是标准插入方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">2</span>)&#123;</span><br><span class="line">num2.insert(make_pair(++cnt2,i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">3</span>)&#123;</span><br><span class="line">num3.insert(make_pair(++cnt3,i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=min(cnt1,min(cnt2,cnt3));<span class="comment">//找出有几组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);<span class="comment">//输出组数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans;i++)&#123;<span class="comment">//输出位置</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num1.find(i)-&gt;second&lt;&lt;<span class="string">" "</span>&lt;&lt;num2.find(i)-&gt;second&lt;&lt;<span class="string">" "</span>&lt;&lt;num3.find(i)-&gt;second&lt;&lt;<span class="built_in">endl</span>;/没有重载[]，这是标准输出方法</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思路：输入x，就在对应的桶+1，然后去一个尽可能大的长度，但需要满足三个桶都有这么多。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="题解" scheme="https://yuygfgg.ml/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF412C 【Pattern】</title>
    <link href="https://yuygfgg.ml/2020/04/17/solution-cf412c/"/>
    <id>https://yuygfgg.ml/2020/04/17/solution-cf412c/</id>
    <published>2020-04-17T12:35:30.000Z</published>
    <updated>2020-04-17T13:19:09.730Z</updated>
    
    <content type="html"><![CDATA[<p>tips:不要以为样例没过就一定错</p><p>思路：什么也匹配不上的输出’?’，否则随便输出一个除了’?’的字母（这里是’a’）</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'?'</span>)&#123;</span><br><span class="line">a[i]=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'.'</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=b[i]&amp;&amp;b[i]!=<span class="string">'?'</span>)&#123;</span><br><span class="line">a[i]=<span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'.'</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'?'</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tips:不要以为样例没过就一定错&lt;/p&gt;
&lt;p&gt;思路：什么也匹配不上的输出’?’，否则随便输出一个除了’?’的字母（这里是’a’）&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="题解" scheme="https://yuygfgg.ml/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 AT2654 【[ARC078A] Splitting Pile】</title>
    <link href="https://yuygfgg.ml/2020/04/04/ti-jie-at2654-arc078a-splitting-pile/"/>
    <id>https://yuygfgg.ml/2020/04/04/ti-jie-at2654-arc078a-splitting-pile/</id>
    <published>2020-04-04T09:55:55.000Z</published>
    <updated>2020-04-13T12:47:44.251Z</updated>
    
    <content type="html"><![CDATA[<p>思路：暴力求出所有可能，排序求最小绝对值差。</p><p>我用vector存储卡的信息，用set排序</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; b;<span class="comment">//自动从小到大排序</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>,x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,tmp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">//由于空间大小不定，只能用push_back函数放入</span></span><br><span class="line">a.push_back(tmp);</span><br><span class="line">s+=tmp;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//现在开始空间大小一定，可以用从0开始的下标访问</span></span><br><span class="line">x=a[<span class="number">0</span>];</span><br><span class="line">y=s-a[<span class="number">0</span>];</span><br><span class="line">b.insert(<span class="built_in">abs</span>(x-y));<span class="comment">//插入第一个</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">x+=a[i];</span><br><span class="line">y-=a[i];</span><br><span class="line">b.insert(<span class="built_in">abs</span>(x-y));<span class="comment">//插入set</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*b.begin()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出自动排序好的最小数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思路：暴力求出所有可能，排序求最小绝对值差。&lt;/p&gt;
&lt;p&gt;我用vector存储卡的信息，用set排序&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>题解 CF149A 【Business trip】</title>
    <link href="https://yuygfgg.ml/2020/04/04/ti-jie-cf149a-business-trip/"/>
    <id>https://yuygfgg.ml/2020/04/04/ti-jie-cf149a-business-trip/</id>
    <published>2020-04-04T01:42:09.000Z</published>
    <updated>2020-04-13T12:47:56.829Z</updated>
    
    <content type="html"><![CDATA[<p>思路：贪心。要让浇水的月份最少，就要让每个浇水月收益最大，所以做法是先将每个月的收益从大到小排序，尽量在收益大的月份浇水。</p><p>用multiset排序，每次取第i大累加直到满足要求即可</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,tmp,d=<span class="number">0</span>,s=<span class="number">0</span>,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">//输入临时变量再插入</span></span><br><span class="line">a.insert(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)&#123;<span class="comment">//目标为0的话直接输出0</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.end();<span class="comment">//指向最大值的iterator</span></span><br><span class="line">it--;<span class="comment">//.end()指向的是最大值还要后面一个，所以要--</span></span><br><span class="line"><span class="keyword">for</span>(;it!=a.begin();it--)&#123;</span><br><span class="line">d+=*it;</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">if</span>(d&gt;=k)&#123;<span class="comment">//完成</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">d+=*it;<span class="comment">//如果不补一次循环，第一个元素不会被遍历到</span></span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">if</span>(d&gt;=k)&#123;<span class="comment">//完成</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//无法完成目标</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思路：贪心。要让浇水的月份最少，就要让每个浇水月收益最大，所以做法是先将每个月的收益从大到小排序，尽量在收益大的月份浇水。&lt;/p&gt;
&lt;p&gt;用multiset排序，每次取第i大累加直到满足要求即可&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>题解 CF919A 【Supermarket】</title>
    <link href="https://yuygfgg.ml/2020/04/03/ti-jie-cf919a-supermarket/"/>
    <id>https://yuygfgg.ml/2020/04/03/ti-jie-cf919a-supermarket/</id>
    <published>2020-04-03T12:45:37.000Z</published>
    <updated>2020-04-13T12:48:35.447Z</updated>
    
    <content type="html"><![CDATA[<p>思路：贪心，找单价最便宜的超市买即可</p><p>用set从小到大排序</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt; c;<span class="comment">//自动从小到大排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> tmp=((<span class="keyword">long</span> <span class="keyword">double</span>)a/b);</span><br><span class="line">        c.insert(tmp*n*<span class="number">1.0</span>);<span class="comment">//插入（*1.0用来强制类型转换，否则插入set的数是向下取整的int）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::iterator it=c.begin();<span class="comment">//最便宜超市的单价</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">10</span>)&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//保留十位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思路：贪心，找单价最便宜的超市买即可&lt;/p&gt;
&lt;p&gt;用set从小到大排序&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>题解 SP11515 【BUSYMAN - I AM VERY BUSY】</title>
    <link href="https://yuygfgg.ml/2020/04/03/ti-jie-sp11515-busyman-i-am-very-busy/"/>
    <id>https://yuygfgg.ml/2020/04/03/ti-jie-sp11515-busyman-i-am-very-busy/</id>
    <published>2020-04-03T06:35:01.000Z</published>
    <updated>2020-04-13T12:48:43.519Z</updated>
    
    <content type="html"><![CDATA[<p>这题是特别水的贪心，可以用自动排序的set实现</p><p>主要思路：将所有活动按结束时间从小到大排序，能进行活动就进行，遇到不能的就结束</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cmp</span>&#123;</span><span class="comment">//比较函数类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> data&amp; x,<span class="keyword">const</span> data&amp; y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.b==y.b)<span class="comment">//如果结束时间一样就按开始时间排</span></span><br><span class="line">        <span class="keyword">return</span> x.a&lt;y.a;</span><br><span class="line">    <span class="keyword">return</span> x.b&lt;y.b;<span class="comment">//否则就按结束时间排</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;data,cmp&gt; a;<span class="comment">//自动按比较函数类排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,t,ans,last;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">data tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=t;j++)&#123;<span class="comment">//由于空间大小是set自动分配的，只能先输入临时变量再通过insert函数插入</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp.a&gt;&gt;tmp.b;</span><br><span class="line">a.insert(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;data&gt;::iterator it=a.begin();<span class="comment">//指向开始的迭代器</span></span><br><span class="line">ans=<span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line">last=INT_MIN;</span><br><span class="line"><span class="keyword">for</span>(;it!=a.end();it++)&#123;</span><br><span class="line"><span class="keyword">if</span>((*it).a&gt;=last)&#123;<span class="comment">//来得及</span></span><br><span class="line">ans++;<span class="comment">//能去的加一</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;ans&lt;&lt;"eee"&lt;&lt;(*it).a&lt;&lt;" "&lt;&lt;(*it).b&lt;&lt;endl;</span></span><br><span class="line">last=(*it).b;<span class="comment">//更新上一次的结束时间</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">a.clear();<span class="comment">//insert会插入，不会覆盖，所以要清空set</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这题是特别水的贪心，可以用自动排序的set实现&lt;/p&gt;
&lt;p&gt;主要思路：将所有活动按结束时间从小到大排序，能进行活动就进行，遇到不能的就结束&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="题解" scheme="https://yuygfgg.ml/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://yuygfgg.ml/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF230A 【Dragons】</title>
    <link href="https://yuygfgg.ml/2020/04/03/ti-jie-cf230a-dragons/"/>
    <id>https://yuygfgg.ml/2020/04/03/ti-jie-cf230a-dragons/</id>
    <published>2020-04-03T03:06:09.000Z</published>
    <updated>2020-04-13T12:48:27.962Z</updated>
    
    <content type="html"><![CDATA[<p>用贪心的策略，每次打最小的龙</p><p>这里用会自动排序的set实现。</p><a id="more"></a><p>具体见代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dr</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;<span class="comment">//龙的结构体</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">drcmp</span>&#123;</span><span class="comment">//比较函数类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> dr&amp; a,<span class="keyword">const</span> dr&amp; b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.x&lt;=b.x;<span class="comment">//注意，要&lt;=，不是&lt;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;dr,drcmp&gt; a;<span class="comment">//存龙的信息的set，使用自定义比较函数类</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;f&gt;&gt;n;</span><br><span class="line">dr tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp.x&gt;&gt;tmp.y;<span class="comment">//输入临时变量在插入</span></span><br><span class="line">a.insert(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;dr&gt;::iterator it=a.begin();<span class="comment">//定义指向开头（最小）的迭代器</span></span><br><span class="line"><span class="keyword">for</span>(;it!=a.end();it++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f&gt;(*it).x) f+=(*it).y;<span class="comment">//现有力量值足够，加上额外获得的（访问iterator指向的元素要加*）</span></span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//不能，输出，结束</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//能进入下一层</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用贪心的策略，每次打最小的龙&lt;/p&gt;
&lt;p&gt;这里用会自动排序的set实现。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="题解" scheme="https://yuygfgg.ml/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://yuygfgg.ml/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF892A 【Greed】</title>
    <link href="https://yuygfgg.ml/2020/04/02/ti-jie-cf892a-greed/"/>
    <id>https://yuygfgg.ml/2020/04/02/ti-jie-cf892a-greed/</id>
    <published>2020-04-02T13:06:28.000Z</published>
    <updated>2020-04-13T12:48:11.470Z</updated>
    
    <content type="html"><![CDATA[<p>把所有可乐倒进2个罐子里，那么肯定是选最大的两个罐子，再和总可乐数比较即可。</p><p>要自动排序又不会去重的数据结构当然选multiset</p><a id="more"></a><p>具体用法见代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; a;<span class="comment">//自动从小到大排序但不会去重的数据结构</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp,n,sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">//输入可乐数并累加</span></span><br><span class="line">sum+=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">////由于空间大小是multiset自动分配的，只能先输入临时变量再通过insert函数插入</span></span><br><span class="line">a.insert(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.end();<span class="comment">//因为是从小到大排序，所以最大的在结尾处</span></span><br><span class="line">it--;<span class="comment">//.end()函数返回的iterator是最后一个元素还要后面一个，所以真正最大的要-1，但multiset::iterator不支持除++和--以外的运算，所以用--运算</span></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;::iterator it2=it;<span class="comment">//第二大</span></span><br><span class="line">it2--;<span class="comment">//同上</span></span><br><span class="line"><span class="keyword">if</span>(sum&lt;=(*it+*it2)) <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//装得下（访问iterator指向的元素要加*）</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//装不下</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把所有可乐倒进2个罐子里，那么肯定是选最大的两个罐子，再和总可乐数比较即可。&lt;/p&gt;
&lt;p&gt;要自动排序又不会去重的数据结构当然选multiset&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="题解" scheme="https://yuygfgg.ml/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://yuygfgg.ml/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF653A 【Bear and Three Balls】</title>
    <link href="https://yuygfgg.ml/2020/04/02/ben-xiao-xue-sheng-ju-ruo-de-di-yi-pian-ti-jie/"/>
    <id>https://yuygfgg.ml/2020/04/02/ben-xiao-xue-sheng-ju-ruo-de-di-yi-pian-ti-jie/</id>
    <published>2020-04-02T06:45:44.000Z</published>
    <updated>2020-04-13T12:45:33.546Z</updated>
    
    <content type="html"><![CDATA[<p>思路：排序+去重，判断是否有连续的三个数</p><p>看到既要排序还要去重，当然用set啦</p><a id="more"></a><p>具体解释见代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; a;<span class="comment">//这是一个自动排序+去重的数据结构</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;<span class="comment">//由于空间大小是set自动分配的，只能先输入临时变量再通过insert函数插入</span></span><br><span class="line">a.insert(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator ed=a.end();<span class="comment">//不直接用.end()的原因看下面for语句的解释</span></span><br><span class="line">ed--;<span class="comment">//由于set::iterator不能用-=运算符，只能分两次--</span></span><br><span class="line">ed--;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=ed;it++)&#123;<span class="comment">//it为a.end()时it+1和+2处会越界，所以用前面相当于a.end()-2的iterator做边界</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it2=it;<span class="comment">//it+1，因为set::iterator不支持+=或+，所以定义两个iterator分别代表it+1和it+2</span></span><br><span class="line">it2++;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it3=it2;<span class="comment">//it+2，理由同上</span></span><br><span class="line">it3++;</span><br><span class="line"><span class="keyword">if</span>(*it+<span class="number">1</span>==*it2&amp;&amp;*it2+<span class="number">1</span>==*it3)&#123;<span class="comment">//判断是否为连续三个数（访问iterator指向的元素要加*）</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//满足</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//结束</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//不满足</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思路：排序+去重，判断是否有连续的三个数&lt;/p&gt;
&lt;p&gt;看到既要排序还要去重，当然用set啦&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="题解" scheme="https://yuygfgg.ml/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="洛谷" scheme="https://yuygfgg.ml/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>神虎牌删犇器</title>
    <link href="https://yuygfgg.ml/2020/03/28/shen-hu-pai-shan-ben-qi/"/>
    <id>https://yuygfgg.ml/2020/03/28/shen-hu-pai-shan-ben-qi/</id>
    <published>2020-03-28T09:55:45.000Z</published>
    <updated>2020-04-13T12:47:27.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>按下键盘上的 <code>f12</code> 按键。</p></li><li><p>在右方控制栏中点击 <code>Console</code> 会出现可以输入的区域。</p></li><li><p>输入下方的这段代码。</p><a id="more"></a></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">switchMode('my');</span><br><span class="line"><span class="function">function <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">console.log('page ' + feedPage);</span><br><span class="line">$.get(<span class="string">"/feed/"</span> + feedMode + <span class="string">"?page="</span> + feedPage, function (resp) &#123;</span><br><span class="line">$feed.append(resp);</span><br><span class="line">$(<span class="string">"#feed-more"</span>).children(<span class="string">"a"</span>).text(<span class="string">"点击查看更多..."</span>)</span><br><span class="line">$(<span class="string">"[name=feed-delete]"</span>).click(function () &#123;</span><br><span class="line">$.post("/api/feed/delete/" + $(this).attr('data-feed-id'), function () &#123;</span><br><span class="line">switchMode('all');</span><br><span class="line">&#125;)</span><br><span class="line">&#125;); feedPage++;</span><br><span class="line">if (resp.indexOf('没有更多动态了') != -1) console.log('finished');</span><br><span class="line"><span class="keyword">else</span> setTimeout(load, <span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(load, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ol><li><p>接着回车 <code>enter</code> 即可。</p></li><li><p>马上会出现一大串的数字，慢慢等待 <code>Page</code> 闪完后出现 <code>finish</code>。</p></li></ol><p>接着输入以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var l =  $('#feed &gt; li &gt; div.am-comment-main &gt; header &gt; div &gt; a:nth-child(2)');</span><br><span class="line"><span class="function">function <span class="title">f</span><span class="params">(i)</span> </span>&#123;</span><br><span class="line">$ .post("/api/feed/delete/"+ $(l[i]).attr('data-feed-id'), function() &#123;</span><br><span class="line">console.<span class="built_in">log</span>(i);</span><br><span class="line"><span class="keyword">if</span>(i&lt;l.length<span class="number">-1</span>)setTimeout(`f($&#123;i+<span class="number">1</span>&#125;)`,<span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ol><li>如果出现 <code>503</code> 界面重新再次<strong>重复上述过程</strong>。</li></ol><p>直到删完为止，重新加载整个界面，建议重启浏览器。</p><p>最后就完成了删犇的过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;按下键盘上的 &lt;code&gt;f12&lt;/code&gt; 按键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在右方控制栏中点击 &lt;code&gt;Console&lt;/code&gt; 会出现可以输入的区域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入下方的这段代码。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="洛谷" scheme="https://yuygfgg.ml/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="工具" scheme="https://yuygfgg.ml/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>关于BFS</title>
    <link href="https://yuygfgg.ml/2020/03/06/about-bfs/"/>
    <id>https://yuygfgg.ml/2020/03/06/about-bfs/</id>
    <published>2020-03-06T12:57:43.000Z</published>
    <updated>2020-04-13T12:44:40.042Z</updated>
    
    <content type="html"><![CDATA[<p><del>他死了</del></p><a id="more"></a><p>BFS，即宽度优先搜索（balabala不讲无意义内容）<br>核心：用一个队列来记录“待办事项”，用最短路来举个例子，代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>],q[<span class="number">250000</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sx,sy,ex,ey;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">'.'</span>) a[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">'#'</span>) a[i][j]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">'*'</span>)&#123;</span><br><span class="line">a[i][j]=<span class="number">0</span>;</span><br><span class="line">ex=i;</span><br><span class="line">ey=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">'@'</span>)&#123;</span><br><span class="line">a[i][j]=<span class="number">0</span>;</span><br><span class="line">sx=i;</span><br><span class="line">sy=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h=<span class="number">1</span>,t=<span class="number">1</span>,n,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">input(n,m);</span><br><span class="line">q[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">q[<span class="number">1</span>][<span class="number">1</span>]=sx;<span class="comment">//初始化“待办事项</span></span><br><span class="line">q[<span class="number">1</span>][<span class="number">2</span>]=sy;<span class="comment">//同上</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(h&lt;=t)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[h][<span class="number">1</span>]==ex&amp;&amp;q[h][<span class="number">2</span>]==ey)&#123;<span class="comment">//达到目标</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;q[h][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">x=q[h][<span class="number">1</span>]+dx[i];<span class="comment">//拿到事情</span></span><br><span class="line">y=q[h][<span class="number">2</span>]+dy[i];<span class="comment">//同上</span></span><br><span class="line"><span class="keyword">if</span>(a[x][y]==<span class="number">0</span>)&#123;<span class="comment">//做事</span></span><br><span class="line">t++;</span><br><span class="line">q[t][<span class="number">0</span>]=q[h][<span class="number">0</span>]+<span class="number">1</span>;<span class="comment">//产生新事</span></span><br><span class="line">q[t][<span class="number">1</span>]=x;<span class="comment">//同上</span></span><br><span class="line">q[t][<span class="number">2</span>]=y;<span class="comment">//同上</span></span><br><span class="line">a[x][y]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h++;<span class="comment">//做完了一件事</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//无解</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面没有用STL中的queue，但原理相同。<br>代码中每次穷举的是步数（即离终点的距离），一次while穷举一个步数。<br>可以看到，队列在while循环做完之前不为空（即有效解一定在穷举完所有步数之前得到），所以BFS的解一般是在循环内产生。<br>然后，我们用深搜（DFS）来实现一下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>],d[<span class="number">105</span>][<span class="number">105</span>],n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dg</span><span class="params">(<span class="keyword">int</span> dep,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep&lt;d[i][j]&amp;&amp;dep&lt;<span class="number">200</span>)&#123;</span><br><span class="line">d[i][j]=dep;</span><br><span class="line"><span class="keyword">if</span>(a[i][j+<span class="number">1</span>]==<span class="number">0</span>) dg(dep+<span class="number">1</span>,i,j+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>][j]==<span class="number">0</span>) dg(dep+<span class="number">1</span>,i+<span class="number">1</span>,j);</span><br><span class="line"><span class="keyword">if</span>(a[i][j<span class="number">-1</span>]==<span class="number">0</span>) dg(dep+<span class="number">1</span>,i,j<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>][j]==<span class="number">0</span>) dg(dep+<span class="number">1</span>,i<span class="number">-1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">'.'</span>) a[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="string">'#'</span>) a[i][j]=<span class="number">-1</span>;</span><br><span class="line">d[i][j]=INT_MAX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">input(n,m);</span><br><span class="line">dg(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;d[n][m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现，DFS慢在于需要回溯，而且不做到底不回头，举个例子，正确路径是右右右右，而DFS永远先穷举左，产生大量无意义劳动，而BFS只需要循环4*4=16次，速度进步巨大。（所以DFS要加玄学限制:dep&lt;200）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;他死了&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://yuygfgg.ml/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第一次做工程的成果</title>
    <link href="https://yuygfgg.ml/2020/03/05/di-yi-ci-zuo-gong-cheng-de-cheng-guo/"/>
    <id>https://yuygfgg.ml/2020/03/05/di-yi-ci-zuo-gong-cheng-de-cheng-guo/</id>
    <published>2020-03-05T12:08:02.000Z</published>
    <updated>2020-04-13T12:47:12.440Z</updated>
    
    <content type="html"><![CDATA[<p>寒假里摸鱼的成果</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">坑点大全：</span></span><br><span class="line"><span class="comment">1.地图是25*25的，不是27*27的</span></span><br><span class="line"><span class="comment">2.x,y是行，列，不是列，行（可能某些地方做了转换） </span></span><br><span class="line"><span class="comment">3.p1在代码中还记作p1，但p2记作p0</span></span><br><span class="line"><span class="comment">4.p2(p0)代码中变量为p1的后面加数字1</span></span><br><span class="line"><span class="comment">5.重要！！重要！！！！重要！！！这个程序分4个线程，分别是打印地图，main函数，p1键盘侦测，p2（p0）键盘侦测</span></span><br><span class="line"><span class="comment">6.原来想做的事战略游戏（放置方块）（像皇室战争）所以障碍才分1-4，1、2归P1，3、4归P2，后来改成走迷宫，添加了6目标方块，还可以放障碍（1-4），后来变成放地雷，再变成自动生成地雷，最后水平不足，变成</span></span><br><span class="line"><span class="comment">自动生成障碍。</span></span><br><span class="line"><span class="comment">7.请未来的自己帮忙，其实自动行走是bug。（2020.1.25） </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line">COORD coord;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mapx=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">bool</span> stop=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> maps[mapx][mapx];</span><br><span class="line">HANDLE hCon;</span><br><span class="line"><span class="keyword">int</span> p1ott,p1btt,p2ott,p2btt,pn=<span class="number">1</span>,x=<span class="number">2</span>,y=<span class="number">2</span>,ops,ops1,x1=<span class="number">2</span>,y1=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">enum</span> Color &#123;DARKBLUE=<span class="number">1</span>,DARKGREEN,DARKTEAL,DARKRED,DARKPINK,DARKYELLOW,GRAY,DARKGRAY,BLUE,GREEN,TEAL,RED,PINK,YELLOW,WHITE&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">window</span><span class="params">()</span></span>&#123;</span><br><span class="line">HANDLE handle=GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">CONSOLE_CURSOR_INFO CursorInfo;</span><br><span class="line">GetConsoleCursorInfo(handle,&amp;CursorInfo);</span><br><span class="line">CursorInfo.bVisible=<span class="literal">false</span>;</span><br><span class="line">SetConsoleCursorInfo(handle,&amp;CursorInfo); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetColor</span><span class="params">(Color c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hCon==<span class="literal">NULL</span>)</span><br><span class="line">    hCon=GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleTextAttribute(hCon,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoToxy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    coord.X=x;</span><br><span class="line">    coord.Y=y;</span><br><span class="line">    HANDLE a=GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleCursorPosition(a,coord);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clrscr</span><span class="params">()</span></span>&#123; </span><br><span class="line">HANDLE hndl=GetStdHandle(STD_OUTPUT_HANDLE); </span><br><span class="line">CONSOLE_SCREEN_BUFFER_INFO csbi; </span><br><span class="line">GetConsoleScreenBufferInfo(hndl,&amp;csbi); </span><br><span class="line">DWORD written; </span><br><span class="line">DWORD N=csbi.dwSize.X*csbi.dwCursorPosition.Y+csbi.dwCursorPosition.X+<span class="number">1</span>; </span><br><span class="line">COORD curhome=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;; </span><br><span class="line">FillConsoleOutputCharacter(hndl,<span class="string">' '</span>,N,curhome,&amp;written); </span><br><span class="line">csbi.srWindow.Bottom-=csbi.srWindow.Top; </span><br><span class="line">csbi.srWindow.Top=<span class="number">0</span>; </span><br><span class="line">SetConsoleWindowInfo(hndl,TRUE,&amp;csbi.srWindow); </span><br><span class="line">SetConsoleCursorPosition(hndl,curhome); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">keyboard</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (GetAsyncKeyState(VK_UP)&amp;<span class="number">0x8000</span>)  </span><br><span class="line"><span class="keyword">return</span> <span class="string">'w'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_DOWN)&amp;<span class="number">0x8000</span>)  </span><br><span class="line"><span class="keyword">return</span> <span class="string">'s'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_LEFT)&amp;<span class="number">0x8000</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_RIGHT)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'d'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_NUMPAD8)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'i'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_NUMPAD5)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'k'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_NUMPAD4)&amp;<span class="number">0x8000</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'j'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_NUMPAD6)&amp;<span class="number">0x8000</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'l'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">to_ch_map</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(n)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">return</span> <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">return</span> <span class="string">'@'</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">return</span> <span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">return</span> <span class="string">'$'</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> <span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="keyword">return</span> <span class="string">'='</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="keyword">return</span> <span class="string">'*'</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="keyword">return</span> <span class="string">'&amp;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outputmap</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">char</span> c2;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;mapx;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;mapx;j++)&#123;</span><br><span class="line">GoToxy(j,i);</span><br><span class="line">c=maps[i][j];</span><br><span class="line">c2=to_ch_map(c);</span><br><span class="line"><span class="keyword">if</span>(maps[i][j]==<span class="number">5</span>||maps[i][j]==<span class="number">7</span>)&#123;</span><br><span class="line">SetColor(RED);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,c2);</span><br><span class="line">SetColor(YELLOW);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">int</span> oops=ops;</span><br><span class="line"><span class="keyword">int</span> ox=<span class="number">1</span>,oy=<span class="number">1</span>,th;</span><br><span class="line">ox=x;oy=y;</span><br><span class="line">op=keyboard();</span><br><span class="line"><span class="keyword">switch</span>(op)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'w'</span>:x--;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>:x++;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>:y--;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>:y++;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maps[x][y]!=<span class="number">0</span>&amp;&amp;maps[x][y]!=<span class="number">6</span>)&#123;</span><br><span class="line">x=ox;</span><br><span class="line">y=oy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(oops==<span class="number">0</span>&amp;&amp;ops==<span class="number">0</span>) maps[ox][oy]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ops==<span class="number">0</span>) maps[x][y]=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> op1;</span><br><span class="line"><span class="keyword">int</span> oops1=ops1;</span><br><span class="line"><span class="keyword">int</span> ox1=<span class="number">1</span>,oy1=<span class="number">1</span>,th1;</span><br><span class="line">ox1=x1;oy1=y1;</span><br><span class="line">op1=keyboard();</span><br><span class="line"><span class="keyword">switch</span>(op1)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'i'</span>:x1--;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'k'</span>:x1++;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'j'</span>:y1--;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'l'</span>:y1++;ops=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maps[x1][y1]!=<span class="number">0</span>&amp;&amp;maps[x1][y1]!=<span class="number">6</span>)&#123;</span><br><span class="line">x1=ox1;</span><br><span class="line">y1=oy1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(oops1==<span class="number">0</span>&amp;&amp;ops1==<span class="number">0</span>) maps[ox1][oy1]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ops1==<span class="number">0</span>) maps[x1][y1]=<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">memset</span>(maps,rand(),<span class="keyword">sizeof</span>(maps));</span><br><span class="line"><span class="built_in">memset</span>(maps,<span class="number">0</span>,<span class="keyword">sizeof</span>(maps));</span><br><span class="line">maps[<span class="number">11</span>][<span class="number">11</span>]=<span class="number">6</span>;</span><br><span class="line">maps[<span class="number">10</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">maps[<span class="number">11</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">maps[<span class="number">8</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">maps[<span class="number">13</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">maps[<span class="number">10</span>][mapx<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">maps[<span class="number">11</span>][mapx<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">maps[<span class="number">8</span>][mapx<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">maps[<span class="number">13</span>][mapx<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">maps[<span class="number">11</span>][<span class="number">10</span>]=<span class="number">2</span>;</span><br><span class="line">maps[<span class="number">11</span>][<span class="number">12</span>]=<span class="number">2</span>;</span><br><span class="line">maps[<span class="number">10</span>][<span class="number">11</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mapx<span class="number">-1</span>;i++)&#123;</span><br><span class="line">maps[<span class="number">1</span>][i]=<span class="number">2</span>;</span><br><span class="line">maps[i][<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mapx<span class="number">-1</span>;i++)&#123;</span><br><span class="line">maps[i][mapx<span class="number">-1</span>]=<span class="number">2</span>;</span><br><span class="line">maps[mapx<span class="number">-1</span>][i]=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;mapx<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;mapx<span class="number">-1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">11</span>||i==<span class="number">11</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(rand()%<span class="number">10</span>==<span class="number">0</span>) maps[i][j]==<span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>(rand()%<span class="number">13</span>==<span class="number">0</span>) maps[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(rand()%<span class="number">75</span>==<span class="number">0</span>) maps[i][j]=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">th1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">outputmap();</span><br><span class="line">&#125;</span><br><span class="line">clrscr();</span><br><span class="line">system(<span class="string">"color C4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">th2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">p2();</span><br><span class="line">Sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">clrscr();</span><br><span class="line">system(<span class="string">"color C4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">th3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">p1();</span><br><span class="line">Sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">clrscr();</span><br><span class="line">system(<span class="string">"color C4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">window();</span><br><span class="line">start();</span><br><span class="line"><span class="function">thread <span class="title">t</span><span class="params">(&amp;th1)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(&amp;th2)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">t3</span><span class="params">(&amp;th3)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(!stop)&#123;</span><br><span class="line"><span class="keyword">if</span>(maps[<span class="number">11</span>][<span class="number">11</span>]!=<span class="number">5</span>&amp;&amp;maps[<span class="number">11</span>][<span class="number">11</span>]!=<span class="number">7</span>&amp;&amp;maps[<span class="number">11</span>][<span class="number">11</span>]!=<span class="number">6</span>)&#123;</span><br><span class="line">maps[<span class="number">11</span>][<span class="number">11</span>]=<span class="number">6</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"this block must be 6!!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maps[<span class="number">11</span>][<span class="number">11</span>]==<span class="number">5</span>)&#123;</span><br><span class="line">stop=!stop;</span><br><span class="line">clrscr();</span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line">system(<span class="string">"color 07"</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"p1 WIN"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maps[<span class="number">11</span>][<span class="number">11</span>]==<span class="number">7</span>)&#123;</span><br><span class="line">stop=!stop;</span><br><span class="line">clrscr();</span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line">system(<span class="string">"color 07"</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"p2 WIN"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寒假里摸鱼的成果&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="其他" scheme="https://yuygfgg.ml/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>从记忆化搜索到DP（动态规划）</title>
    <link href="https://yuygfgg.ml/2020/02/19/cong-ji-yi-hua-sou-suo-sou-suo-dao-dpdong-tai-gui-hua/"/>
    <id>https://yuygfgg.ml/2020/02/19/cong-ji-yi-hua-sou-suo-sou-suo-dao-dpdong-tai-gui-hua/</id>
    <published>2020-02-19T13:01:57.000Z</published>
    <updated>2020-04-13T12:46:05.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><p>记忆化搜索是啥</p></li><li><p>记忆化搜索和动态规划有啥关系</p></li><li><p>动态规划做法</p><a id="more"></a><h1 id="1-记忆化搜索是啥（引入"><a href="#1-记忆化搜索是啥（引入" class="headerlink" title="1. 记忆化搜索是啥（引入"></a>1. 记忆化搜索是啥（引入</h1><p>好，就以采药这道题为例，我不会动态规划，只会搜索，我就会直接写一个粗暴的 DFS :</p></li></ul><p>注: 为了方便食用, 本文中所有代码省略头文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="keyword">int</span> tcost[<span class="number">103</span>],mget[<span class="number">103</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tleft,<span class="keyword">int</span> tans)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tleft&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos==n+<span class="number">1</span>)&#123;</span><br><span class="line">        ans=max(ans,tans);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(pos+<span class="number">1</span>,tleft,tans);</span><br><span class="line">    dfs(pos+<span class="number">1</span>,tleft-tcost[pos],tans+mget[pos]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tcost[i]&gt;&gt;mget[i];</span><br><span class="line">    dfs(<span class="number">1</span>,t,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>30pts</p><p>然后我心血来潮, 想不借助任何 “外部变量”(就是 dfs 函数外且 值随 dfs 运行而改变的变量 ), 比如 ans</p><p>把 ans 删了之后就有一个问题: 我们拿什么来记录答案?</p><p>答案很简单:</p><p>返回值!</p><p>此时 dfs(pos,tleft) 返回在时间 tleft内采集 后 pos 个草药, 能获得的最大收益</p><p>不理解就看看代码吧:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,time;</span><br><span class="line"><span class="keyword">int</span> tcost[<span class="number">103</span>],mget[<span class="number">103</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tleft)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dfs1,dfs2=-INF;</span><br><span class="line">    dfs1=dfs(pos+<span class="number">1</span>,tleft);</span><br><span class="line">    <span class="keyword">if</span>( tleft&gt;tcost[pos] )</span><br><span class="line">        dfs2=dfs(pos+<span class="number">1</span>,tleft-tcost[pos])+mget[pos];</span><br><span class="line">    <span class="keyword">return</span> max(dfs1,dfs2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;time&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tcost[i]&gt;&gt;mget[i];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">1</span>,time)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><del>还是30pts，我太难了</del><br>但这个时候, 我们的程序已经不依赖任何外部变量了.</p><p>然后我非常无聊, 将所有 dfs 的返回值都记录下来, 竟然发现……</p><pre><code>震惊, 对于相同的 pos 和 tleft,dfs 的返回值总是相同的!</code></pre><p>想一想也不奇怪, 因为我们的 dfs 没有依赖任何外部变量.</p><p>旁白: 像 tcost[103],mget[103] 这种东西不算是外部变量, 因为她们在 dfs 过程中不变.</p><p>然后?</p><p>开个数组 mem , 记录下来每个 dfs(pos,tleft) 的返回值. 刚开始把 mem 中每个值都设成 -1 (代表没访问过). 每次刚刚进入一个 dfs 前(我们的 dfs 是递归调用的嘛), 都检测 mem[pos][tleft]是否为 -1 , 如果是就正常执行并把答案记录到 mem 中, 否则?</p><p>直接返回 mem 中的值!<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="keyword">int</span> tcost[<span class="number">103</span>],mget[<span class="number">103</span>];</span><br><span class="line"><span class="keyword">int</span> mem[<span class="number">103</span>][<span class="number">1003</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tleft)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mem[pos][tleft]!=<span class="number">-1</span>) <span class="keyword">return</span> mem[pos][tleft];</span><br><span class="line">    <span class="keyword">if</span>(pos==n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> mem[pos][tleft] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dfs1,dfs2=-INF;</span><br><span class="line">    dfs1 = dfs(pos+<span class="number">1</span>,tleft);</span><br><span class="line">    <span class="keyword">if</span>(tleft&gt;=tcost[pos])</span><br><span class="line">        dfs2=dfs(pos+<span class="number">1</span>,tleft-tcost[pos])+mget[pos];</span><br><span class="line">    <span class="keyword">return</span> mem[pos][tleft]=max(dfs1,dfs2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(mem,<span class="number">-1</span>,<span class="keyword">sizeof</span>(mem));</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tcost[i]&gt;&gt;mget[i];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">1</span>,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>此时 mem 的意义与 dfs 相同：</p><pre><code>在时间 tleft内采集 后 pos 个草药, 能获得的最大收益</code></pre><p>这能 ac?</p><p>能. 这就是 “采药” 那题的 AC 代码</p><p>好我们倒腾出了记忆化搜索</p><p>总结一下记忆化搜索是啥:<br>不依赖任何 外部变量，答案以返回值的形式存在, 而不能以参数的形式存在(就是不能将 dfs 定义成 dfs(pos,tleft,nowans ), 这里面的 nowans 不符合要求).</p><p>对于相同一组参数, dfs 返回值总是相同的</p><h1 id="记忆化搜索与动态规划的关系-（分析"><a href="#记忆化搜索与动态规划的关系-（分析" class="headerlink" title="记忆化搜索与动态规划的关系:（分析"></a>记忆化搜索与动态规划的关系:（分析</h1><p>基本是朋 (ji) 友关系</p><p>有人会问: 记忆化搜索难道不是搜索?</p><p>一定程度上来说，她是搜索.但个人认为她更像dp</p><p>其实说白了，记忆化搜索就是dp</p><p>不信你看mem 的意义:</p><p>在时间 tleft 内采集 后 pos 个草药, 能获得的最大收益</p><p>这不就是dp的状态?</p><p>由上面的代码中可以看出:</p><p>dfs(pos,left) = max(dfs(pos+1,tleft-tcost[pos])+mget[pos] , dfs(pos+1,tleft))<br>即为</p><p>mem[pos][tleft] = max(mem[pos+1][tleft-tcost[pos]]+mget[pos] , mem[pos+1][tleft])<br>这不就是dp的状态转移?</p><p>总结一下：</p><pre><code>记忆化搜索和动态规划从根本上来讲就是一个东西,**(印象中)任何一个 dp 方程都能转为记忆化搜索 ，反之亦然（为什么？见下文“体现在”的第四条）</code></pre><p>体现在</p><ul><li><p>根据记忆化搜索的参数可以直接得到dp的状态，反之亦然</p></li><li><p>根据记忆化搜索的递归关系可以写出状态转移方程，这个方程可以直接写出循环式的dp，只不过是反的(想想为什么？)，反之亦然</p></li><li><p>大部分记忆化搜索时空复杂度与 不加优化的 dp 完全相同</p></li><li><p><strong>最重要的一点：二者思想类似！！ 核心思想均为：利用对于相同参数答案相同的特性，对于相同的参数（循环式的dp体现为数组下标），记录其答案，免去重复计算，从而起到优化时间复杂度的作用。这，便是二者的精髓。</strong></p></li></ul><p>建议好好想想第四条。记住，学一个算法，一定要理解他的精髓。</p><p>举个栗子:</p><p>dp[i][j][k] = dp[i+1][j+1][k-a[j]] + dp[i+1][j][k]<br>转为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    边界条件</span><br><span class="line">    <span class="keyword">if</span>( mem[i][j][k]!=<span class="number">-1</span>) <span class="keyword">return</span> mem[i][j][k];</span><br><span class="line">    <span class="keyword">return</span> mem[i][j][k]=dfs(i+<span class="number">1</span>,j+<span class="number">1</span>,k-a[j])+dfs(i+<span class="number">1</span>,j,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(mem,<span class="number">-1</span>,<span class="keyword">sizeof</span>(mem));</span><br><span class="line">    读入</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>二者满足上面提到的所有关系</p><h1 id="dp做法"><a href="#dp做法" class="headerlink" title="dp做法"></a>dp做法</h1><p><del>上面转移方程都出来了，还不会？？</del><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1001</span>],n,t,v[<span class="number">101</span>],w[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=t;j&gt;=w[i];j--) &#123;</span><br><span class="line">            f[j]=max(f[j-w[i]]+v[i], f[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f[t];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;记忆化搜索是啥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;记忆化搜索和动态规划有啥关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态规划做法&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://yuygfgg.ml/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="https://yuygfgg.ml/2019/10/25/dg/"/>
    <id>https://yuygfgg.ml/2019/10/25/dg/</id>
    <published>2019-10-24T16:00:00.000Z</published>
    <updated>2020-04-13T12:47:01.705Z</updated>
    
    <content type="html"><![CDATA[<p>这节课学了递归，<del>好晕</del></p><p>好不容易想通了一点赶紧记下，充当第一篇博客</p><a id="more"></a><p>递归就是函数自己调用自己的过程。那为什么要有递归呢？原因很简单：在解决一个问题的同时，需要解决另一个与当前问题相同的问题，并且这个问题在特定情况下有解（递归结束条件），其他情况的答案都可由此答案推导而来（转移方程）。那又有问题了，为什么不用循环呢？观察上面的描述中“需要解决另一个与当前问题相同的问题”这一句话，真的只需要解决另一个吗？答案是否定的，有可能要解决多个同样的问题，这种情况下，如果使用循环，那么每个循环都要产生多个同样的循环，是无法实现的，所以才要使用递归。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这节课学了递归，&lt;del&gt;好晕&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;好不容易想通了一点赶紧记下，充当第一篇博客&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://yuygfgg.ml/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
